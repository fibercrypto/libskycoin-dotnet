/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * The version of the OpenAPI document: 0.26.0
 * Contact: contact@skycoin.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Skyapi.Client.OpenAPIDateConverter;

namespace Skyapi.Model
{
    /// <summary>
    /// BlockVerboseSchemaHeader
    /// </summary>
    [DataContract]
    public partial class BlockVerboseSchemaHeader :  IEquatable<BlockVerboseSchemaHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BlockVerboseSchemaHeader" /> class.
        /// </summary>
        /// <param name="seq">seq.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="fee">fee.</param>
        /// <param name="version">version.</param>
        /// <param name="blockHash">blockHash.</param>
        /// <param name="previousBlockHash">previousBlockHash.</param>
        /// <param name="txBodyHash">txBodyHash.</param>
        /// <param name="uxHash">uxHash.</param>
        public BlockVerboseSchemaHeader(int? seq = default(int?), int? timestamp = default(int?), string fee = default(string), int? version = default(int?), string blockHash = default(string), string previousBlockHash = default(string), string txBodyHash = default(string), string uxHash = default(string))
        {
            this.Seq = seq;
            this.Timestamp = timestamp;
            this.Fee = fee;
            this.Version = version;
            this.BlockHash = blockHash;
            this.PreviousBlockHash = previousBlockHash;
            this.TxBodyHash = txBodyHash;
            this.UxHash = uxHash;
        }
        
        /// <summary>
        /// Gets or Sets Seq
        /// </summary>
        [DataMember(Name="seq", EmitDefaultValue=false)]
        public int? Seq { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public int? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Fee
        /// </summary>
        [DataMember(Name="fee", EmitDefaultValue=false)]
        public string Fee { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int? Version { get; set; }

        /// <summary>
        /// Gets or Sets BlockHash
        /// </summary>
        [DataMember(Name="block_hash", EmitDefaultValue=false)]
        public string BlockHash { get; set; }

        /// <summary>
        /// Gets or Sets PreviousBlockHash
        /// </summary>
        [DataMember(Name="previous_block_hash", EmitDefaultValue=false)]
        public string PreviousBlockHash { get; set; }

        /// <summary>
        /// Gets or Sets TxBodyHash
        /// </summary>
        [DataMember(Name="tx_body_hash", EmitDefaultValue=false)]
        public string TxBodyHash { get; set; }

        /// <summary>
        /// Gets or Sets UxHash
        /// </summary>
        [DataMember(Name="ux_hash", EmitDefaultValue=false)]
        public string UxHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BlockVerboseSchemaHeader {\n");
            sb.Append("  Seq: ").Append(Seq).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Fee: ").Append(Fee).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  BlockHash: ").Append(BlockHash).Append("\n");
            sb.Append("  PreviousBlockHash: ").Append(PreviousBlockHash).Append("\n");
            sb.Append("  TxBodyHash: ").Append(TxBodyHash).Append("\n");
            sb.Append("  UxHash: ").Append(UxHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BlockVerboseSchemaHeader);
        }

        /// <summary>
        /// Returns true if BlockVerboseSchemaHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of BlockVerboseSchemaHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BlockVerboseSchemaHeader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Seq == input.Seq ||
                    (this.Seq != null &&
                    this.Seq.Equals(input.Seq))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.Fee == input.Fee ||
                    (this.Fee != null &&
                    this.Fee.Equals(input.Fee))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.BlockHash == input.BlockHash ||
                    (this.BlockHash != null &&
                    this.BlockHash.Equals(input.BlockHash))
                ) && 
                (
                    this.PreviousBlockHash == input.PreviousBlockHash ||
                    (this.PreviousBlockHash != null &&
                    this.PreviousBlockHash.Equals(input.PreviousBlockHash))
                ) && 
                (
                    this.TxBodyHash == input.TxBodyHash ||
                    (this.TxBodyHash != null &&
                    this.TxBodyHash.Equals(input.TxBodyHash))
                ) && 
                (
                    this.UxHash == input.UxHash ||
                    (this.UxHash != null &&
                    this.UxHash.Equals(input.UxHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Seq != null)
                    hashCode = hashCode * 59 + this.Seq.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.Fee != null)
                    hashCode = hashCode * 59 + this.Fee.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.BlockHash != null)
                    hashCode = hashCode * 59 + this.BlockHash.GetHashCode();
                if (this.PreviousBlockHash != null)
                    hashCode = hashCode * 59 + this.PreviousBlockHash.GetHashCode();
                if (this.TxBodyHash != null)
                    hashCode = hashCode * 59 + this.TxBodyHash.GetHashCode();
                if (this.UxHash != null)
                    hashCode = hashCode * 59 + this.UxHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
