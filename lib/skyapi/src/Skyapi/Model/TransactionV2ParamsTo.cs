/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * The version of the OpenAPI document: 0.26.0
 * Contact: contact@skycoin.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Skyapi.Model
{
    /// <summary>
    /// TransactionV2ParamsUnspentTo
    /// </summary>
    [DataContract]
    public class TransactionV2ParamsTo : IEquatable<TransactionV2ParamsTo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionV2ParamsTo" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="coins">coins.</param>
        public TransactionV2ParamsTo(string address = default(string), string coins = default(string),
            string hours = default(string))
        {
            Address = address;
            Coins = coins;
            Hours = hours;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Coins
        /// </summary>
        [DataMember(Name = "coins", EmitDefaultValue = false)]
        public string Coins { get; set; }

        /// <summary>
        /// Gets or Sets Hours
        /// </summary>
        [DataMember(Name = "hours", EmitDefaultValue = false)]
        public string Hours { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionV2ParamsUnspentTo {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Coins: ").Append(Coins).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TransactionV2ParamsTo);
        }

        /// <summary>
        /// Returns true if TransactionV2ParamsUnspentTo instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionV2ParamsUnspentTo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionV2ParamsTo input)
        {
            if (input == null)
                return false;

            return
                (
                    Address == input.Address ||
                    (Address != null &&
                     Address.Equals(input.Address))
                ) &&
                (
                    Coins == input.Coins ||
                    (Coins != null &&
                     Coins.Equals(input.Coins))
                ) &&
                (
                    Hours == input.Hours ||
                    (Hours != null &&
                     Hours.Equals(input.Hours))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                if (Coins != null)
                    hashCode = hashCode * 59 + Coins.GetHashCode();
                if (Hours != null)
                    hashCode = hashCode * 59 + Hours.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}