/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * The version of the OpenAPI document: 0.27.0
 * Contact: contact@skycoin.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Skyapi.Model
{
    /// <summary>
    /// TransactionV2ParamsUnspentHoursSelection
    /// </summary>
    [DataContract]
    public class TransactionV2ParamsHoursSelection :  IEquatable<TransactionV2ParamsHoursSelection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionV2ParamsHoursSelection" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="mode">mode.</param>
        /// <param name="shareFactor">shareFactor.</param>
        public TransactionV2ParamsHoursSelection(string type = default, string mode = default, string shareFactor = default)
        {
            Type = type;
            Mode = mode;
            ShareFactor = shareFactor;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or Sets ShareFactor
        /// </summary>
        [DataMember(Name="share_factor", EmitDefaultValue=false)]
        public string ShareFactor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionV2ParamsUnspentHoursSelection {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  ShareFactor: ").Append(ShareFactor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TransactionV2ParamsHoursSelection);
        }

        /// <summary>
        /// Returns true if TransactionV2ParamsUnspentHoursSelection instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionV2ParamsUnspentHoursSelection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionV2ParamsHoursSelection input)
        {
            if (input == null)
                return false;

            return 
                (
                    Type == input.Type ||
                    (Type != null &&
                    Type.Equals(input.Type))
                ) && 
                (
                    Mode == input.Mode ||
                    (Mode != null &&
                    Mode.Equals(input.Mode))
                ) && 
                (
                    ShareFactor == input.ShareFactor ||
                    (ShareFactor != null &&
                    ShareFactor.Equals(input.ShareFactor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Mode != null)
                    hashCode = hashCode * 59 + Mode.GetHashCode();
                if (ShareFactor != null)
                    hashCode = hashCode * 59 + ShareFactor.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
