/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * The version of the OpenAPI document: 0.27.0
 * Contact: contact@skycoin.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Skyapi.Model
{
    /// <summary>
    /// InlineResponse2008Data
    /// </summary>
    [DataContract]
    public class InlineResponse2008Data : IEquatable<InlineResponse2008Data>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2008Data" /> class.
        /// </summary>
        /// <param name="transaction">transaction.</param>
        /// <param name="encodedTransaction"></param>
        public InlineResponse2008Data(CreatedTransaction transaction = default, string encodedTransaction = default)
        {
            Transaction = transaction;
            EncodedTransaction = encodedTransaction;
        }

        /// <summary>
        /// Gets or Sets Transaction
        /// </summary>
        [DataMember(Name = "transaction", EmitDefaultValue = false)]
        public CreatedTransaction Transaction { get; set; }

        /// <summary>
        /// Gets or Sets EncodedTransaction
        /// </summary>
        [DataMember(Name = "encoded_transaction", EmitDefaultValue = false)]
        public string EncodedTransaction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2008Data {\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("  EncodedTransaction: ").Append(EncodedTransaction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as InlineResponse2008Data);
        }

        /// <summary>
        /// Returns true if InlineResponse2008Data instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2008Data to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2008Data input)
        {
            if (input == null)
                return false;

            return
            (
                Transaction.Equals(input.Transaction) ||
                (Transaction != null &&
                 Transaction.Equals(input.Transaction)) &&
                (EncodedTransaction == input.EncodedTransaction ||
                 EncodedTransaction != null && EncodedTransaction.Equals(input.EncodedTransaction)
                )
            );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (Transaction != null)
                    hashCode = hashCode * 59 + Transaction.GetHashCode();
                if (EncodedTransaction != null)
                    hashCode = hashCode * 59 + EncodedTransaction.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}