/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * The version of the OpenAPI document: 0.27.0
 * Contact: contact@skycoin.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Skyapi.Model
{
    /// <summary>
    /// WalletTransactionRequest
    /// </summary>
    [DataContract]
    public class WalletTransactionRequest : IEquatable<WalletTransactionRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletTransactionRequest" /> class.
        /// </summary>
        /// <param name="changeAddress">changeAddress.</param>
        /// <param name="hoursSelection">hoursSelection.</param>
        /// <param name="ignoreUnconfirmed">ignoreUnconfirmed.</param>
        /// <param name="to">to.</param>
        /// <param name="addresses"></param>
        /// <param name="id"></param>
        /// <param name="password"></param>
        /// <param name="unspents"></param>
        public WalletTransactionRequest(string changeAddress = default,
            TransactionV2ParamsHoursSelection hoursSelection = default,
            bool? ignoreUnconfirmed = false, List<TransactionV2ParamsTo> to = default,
            List<string> addresses = default, string id = default,
            string password = default, List<string> unspents = default)
        {
            ChangeAddress = changeAddress;
            HoursSelection = hoursSelection;
            IgnoreUnconfirmed = ignoreUnconfirmed;
            To = to;
            Addresses = addresses;
            Id = id;
            Password = password;
            Unspents = unspents;
        }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name = "addresses", EmitDefaultValue = false)]
        public List<string> Addresses { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "wallet_id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Unspents
        /// </summary>
        [DataMember(Name = "unspents", EmitDefaultValue = false)]
        public List<string> Unspents { get; set; }

        /// <summary>
        /// Gets or Sets ChangeAddress
        /// </summary>
        [DataMember(Name = "change_address", EmitDefaultValue = false)]
        public string ChangeAddress { get; set; }

        /// <summary>
        /// Gets or Sets HoursSelection
        /// </summary>
        [DataMember(Name = "hours_selection", EmitDefaultValue = false)]
        public TransactionV2ParamsHoursSelection HoursSelection { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreUnconfirmed
        /// </summary>
        [DataMember(Name = "ignore_unconfirmed", EmitDefaultValue = true)]
        public bool? IgnoreUnconfirmed { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public List<TransactionV2ParamsTo> To { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WalletTransactionRequest {\n");
            sb.Append("  ChangeAddress: ").Append(ChangeAddress).Append("\n");
            sb.Append("  HoursSelection: ").Append(HoursSelection).Append("\n");
            sb.Append("  IgnoreUnconfirmed: ").Append(IgnoreUnconfirmed).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Wallet_id: ").Append(Id).Append("\n");
            sb.Append("  addresses: ").Append(Addresses).Append("\n");
            sb.Append("  password: ").Append(Password).Append("\n");
            sb.Append("  unspents: ").Append(Unspents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as WalletTransactionRequest);
        }

        /// <summary>
        /// Returns true if WalletTransactionRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of WalletTransactionRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WalletTransactionRequest input)
        {
            if (input == null)
                return false;

            return
                (
                    ChangeAddress == input.ChangeAddress ||
                    (ChangeAddress != null &&
                     ChangeAddress.Equals(input.ChangeAddress))
                ) &&
                (
                    HoursSelection == input.HoursSelection ||
                    (HoursSelection != null &&
                     HoursSelection.Equals(input.HoursSelection))
                ) &&
                (
                    IgnoreUnconfirmed == input.IgnoreUnconfirmed ||
                    (IgnoreUnconfirmed != null &&
                     IgnoreUnconfirmed.Equals(input.IgnoreUnconfirmed))
                ) &&
                (
                    To == input.To ||
                    To != null &&
                    input.To != null &&
                    To.SequenceEqual(input.To)
                ) &&
                (
                    Id == input.Id ||
                    (Id != null &&
                     Id.Equals(input.Id))
                ) &&
                (
                    Addresses == input.Addresses ||
                    (Addresses != null &&
                     Addresses.Equals(input.Addresses))
                ) &&
                (
                    Unspents == input.Unspents ||
                    (Unspents != null &&
                     Unspents.Equals(input.Unspents))
                ) &&
                (
                    Password == input.Password ||
                    (Password != null &&
                     Password.Equals(input.Password))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (ChangeAddress != null)
                    hashCode = hashCode * 59 + ChangeAddress.GetHashCode();
                if (HoursSelection != null)
                    hashCode = hashCode * 59 + HoursSelection.GetHashCode();
                if (IgnoreUnconfirmed != null)
                    hashCode = hashCode * 59 + IgnoreUnconfirmed.GetHashCode();
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                if (Addresses != null)
                    hashCode = hashCode * 59 + Addresses.GetHashCode();
                if (Unspents != null)
                    hashCode = hashCode * 59 + Unspents.GetHashCode();
                if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext)
        {
            yield break;
        }
    }
}