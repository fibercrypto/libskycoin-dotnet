/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * The version of the OpenAPI document: 0.26.0
 * Contact: contact@skycoin.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Skyapi.Model
{
    /// <summary>
    /// TransactionV2ParamsAddress
    /// </summary>
    [DataContract]
    public class TransactionV2ParamsAddress : IEquatable<TransactionV2ParamsAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionV2ParamsAddress" /> class.
        /// </summary>
        /// <param name="hoursSelection">hoursSelection.</param>
        /// <param name="address">address.</param>
        /// <param name="changeAddress">changeAddress.</param>
        ///    /// <param name="to">to.</param>
        public TransactionV2ParamsAddress(
            TransactionV2ParamsHoursSelection hoursSelection = default(TransactionV2ParamsHoursSelection),
            List<string> address = default(List<string>),
            string changeAddress = default(string),
            List<TransactionV2ParamsTo> to = default(List<TransactionV2ParamsTo>))
        {
            HoursSelection = hoursSelection;
            Address = address;
            ChangeAddress = changeAddress;
            To = to;
        }

        /// <summary>
        /// Gets or Sets HoursSelection
        /// </summary>
        [DataMember(Name = "hours_selection", EmitDefaultValue = false)]
        public TransactionV2ParamsHoursSelection HoursSelection { get; set; }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name = "addresses", EmitDefaultValue = false)]
        public List<string> Address { get; set; }

        /// <summary>
        /// Gets or Sets ChangeAddress
        /// </summary>
        [DataMember(Name = "change_address", EmitDefaultValue = false)]
        public string ChangeAddress { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", EmitDefaultValue = false)]
        public List<TransactionV2ParamsTo> To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionV2ParamsAddress {\n");
            sb.Append("  HoursSelection: ").Append(HoursSelection).Append("\n");
            sb.Append("  Unspents: ").Append(Address).Append("\n");
            sb.Append("  ChangeAddress: ").Append(ChangeAddress).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as TransactionV2ParamsAddress);
        }

        /// <summary>
        /// Returns true if TransactionV2ParamsAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionV2ParamsAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionV2ParamsAddress input)
        {
            if (input == null)
                return false;

            return
                (
                    Equals(HoursSelection, input.HoursSelection) ||
                    (HoursSelection != null &&
                     HoursSelection.Equals(input.HoursSelection))
                ) &&
                (
                    Address == input.Address ||
                    Address != null &&
                    input.Address != null &&
                    Address.SequenceEqual(input.Address)
                ) &&
                (
                    ChangeAddress == input.ChangeAddress ||
                    (ChangeAddress != null &&
                     ChangeAddress.Equals(input.ChangeAddress))
                ) &&
                (
                    To == input.To ||
                    To != null &&
                    input.To != null &&
                    To.SequenceEqual(input.To)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (HoursSelection != null)
                    hashCode = hashCode * 59 + HoursSelection.GetHashCode();
                if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                if (ChangeAddress != null)
                    hashCode = hashCode * 59 + ChangeAddress.GetHashCode();
                if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}