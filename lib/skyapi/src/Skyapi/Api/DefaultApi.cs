/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * The version of the OpenAPI document: 0.27.0
 * Contact: contact@skycoin.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Newtonsoft.Json;
using RestSharp;
using Skyapi.Client;
using Skyapi.Model;

namespace Skyapi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        /// Returns the total number of unique address that have coins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 AddressCount();

        /// <summary>
        /// Returns the total number of unique address that have coins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> AddressCountWithHttpInfo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the historical, spent outputs associated with an address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by</param>
        /// <returns>List&lt;Object&gt;</returns>
        List<Object> AddressUxouts(string address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the historical, spent outputs associated with an address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Object>> AddressUxoutsWithHttpInfo(string address);

        /// <summary>
        /// Get raw transaction by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id</param>
        /// <returns>string</returns>
        string ApiV1RawtxGet(string txid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get raw transaction by id
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id</param>
        /// <returns>ApiResponse of object</returns>
        ApiResponse<object> ApiV1RawtxGetWithHttpInfo(string txid);

        /// <summary>
        /// Prometheus metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string ApiV2MetricsGet();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Prometheus metrics
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiV2MetricsGetWithHttpInfo();

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Balance</returns>
        Balance BalanceGet(string addrs);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>ApiResponse of Balance</returns>
        ApiResponse<Balance> BalanceGetWithHttpInfo(string addrs);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Balance</returns>
        Balance BalancePost(string addrs);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>ApiResponse of Balance</returns>
        ApiResponse<Balance> BalancePostWithHttpInfo(string addrs);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">get block by hash (optional)</param>
        /// <param name="seq">get block by sequence number (optional)</param>
        /// <returns>List&lt;BlockSchema&gt;</returns>
        BlockSchema Block(string hash = null, int? seq = null);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">get block by hash (optional)</param>
        /// <param name="seq">get block by sequence number (optional)</param>
        /// <returns>ApiResponse of List&lt;BlockSchema&gt;</returns>
        ApiResponse<BlockSchema> BlockWithHttpInfo(string hash = null, int? seq = null);

        /// <summary>
        /// Returns the blockchain metadata.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object BlockchainMetadata();

        /// <summary>
        /// Returns the blockchain metadata.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BlockchainMetadataWithHttpInfo();

        /// <summary>
        /// Returns the blockchain sync progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BlockchainProgress</returns>
        BlockchainProgress BlockchainProgress();

        /// <summary>
        /// Returns the blockchain sync progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BlockchainProgress</returns>
        ApiResponse<BlockchainProgress> BlockchainProgressWithHttpInfo();

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start seq (optional)</param>
        /// <param name="end">end seq (optional)</param>
        /// <param name="seqs">comma-separated list of block seqs (optional)</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 Blocks(int? start = null, int? end = null, List<int?> seqs = null);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start seq (optional)</param>
        /// <param name="end">end seq (optional)</param>
        /// <param name="seqs">comma-separated list of block seqs (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> BlocksWithHttpInfo(int? start = null, int? end = null, List<int?> seqs = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// coinSupplyHandler returns coin distribution supply stats
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 CoinSupply();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// coinSupplyHandler returns coin distribution supply stats
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> CoinSupplyWithHttpInfo();

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 Csrf();

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> CsrfWithHttpInfo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. (optional)</param>
        /// <param name="key">key of the specific value to get. (optional)</param>
        /// <returns></returns>
        void DataDELETE(string type = null, string key = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. (optional)</param>
        /// <param name="key">key of the specific value to get. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataDELETEWithHttpInfo(string type = null, string key = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. (optional)</param>
        /// <param name="key">key of the specific value to get. (optional)</param>
        /// <returns>Object</returns>
        Object DataGET(string type = null, string key = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. (optional)</param>
        /// <param name="key">key of the specific value to get. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> DataGETWithHttpInfo(string type = null, string key = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. (optional)</param>
        /// <param name="key">key of the specific value to get. (optional)</param>
        /// <param name="val">additional value. (optional)</param>
        /// <returns></returns>
        void DataPOST(string type = null, string key = null, string val = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. (optional)</param>
        /// <param name="key">key of the specific value to get. (optional)</param>
        /// <param name="val">additional value. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DataPOSTWithHttpInfo(string type = null, string key = null, string val = null);

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> DefaultConnections();

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> DefaultConnectionsWithHttpInfo();

        /// <summary>
        /// Returns node health data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object Health();

        /// <summary>
        /// Returns node health data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> HealthWithHttpInfo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the most recent N blocks on the blockchain
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="num">Num of blockss</param>
        /// <returns>Object</returns>
        Object LastBlocks(int? num);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the most recent N blocks on the blockchain
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="num">Num of blockss</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> LastBlocksWithHttpInfo(int? num);

        /// <summary>
        /// This endpoint returns a specific connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>NetworkConnectionSchema</returns>
        NetworkConnectionSchema NetworkConnection(string addr);

        /// <summary>
        /// This endpoint returns a specific connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>ApiResponse of NetworkConnectionSchema</returns>
        ApiResponse<NetworkConnectionSchema> NetworkConnectionWithHttpInfo(string addr);

        /// <summary>
        /// This endpoint returns all outgoings connections.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 NetworkConnections(string states = null, string direction = null);

        /// <summary>
        /// This endpoint returns all outgoings connections.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> NetworkConnectionsWithHttpInfo(string states = null, string direction = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint disconnects a connection by ID or address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns></returns>
        void NetworkConnectionsDisconnect(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint disconnects a connection by ID or address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NetworkConnectionsDisconnectWithHttpInfo(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns all connections found through peer exchange
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> NetworkConnectionsExchange();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns all connections found through peer exchange
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> NetworkConnectionsExchangeWithHttpInfo();

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        List<string> NetworkConnectionsTrust();

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> NetworkConnectionsTrustWithHttpInfo();

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Object</returns>
        Outputs OutputsGet(List<string> address = null, List<string> hash = null);

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>ApiResponse of Outputs</returns>
        ApiResponse<Outputs> OutputsGetWithHttpInfo(List<string> address = null, List<string> hash = null);

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Outputs</returns>
        Outputs OutputsPost(List<string> address = null, List<string> hash = null);

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>ApiResponse of Outputs</returns>
        ApiResponse<Outputs> OutputsPostWithHttpInfo(List<string> address = null, List<string> hash = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20010&gt;</returns>
        List<InlineResponse20010> PendingTxs();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20010&gt;</returns>
        ApiResponse<List<InlineResponse20010>> PendingTxsWithHttpInfo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object ResendUnconfirmedTxns();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ResendUnconfirmedTxnsWithHttpInfo();

        /// <summary>
        /// Returns the top skycoin holders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>Object</returns>
        Object Richlist(bool? includeDistribution = null, string n = null);

        /// <summary>
        /// Returns the top skycoin holders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RichlistWithHttpInfo(bool? includeDistribution = null, string n = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a transaction identified by its txid hash with just id
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction Id</param>
        /// <returns>Transaction</returns>
        Transaction Transaction(string txid, bool encoded = false);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a transaction identified by its txid hash with just id
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction Id</param>
        /// <returns>ApiResponse of Transaction</returns>
        ApiResponse<Transaction> TransactionWithHttpInfo(string txid, bool encoded = false);

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <param name="noBroadcast">Disable the network broadcast (optional)</param>
        /// <returns>string</returns>
        string TransactionInject(string rawtx, bool? noBroadcast = null);

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <param name="noBroadcast">Disable the network broadcast (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> TransactionInjectWithHttpInfo(string rawtx, bool? noBroadcast = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionV2ParamsAddress"> (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 TransactionPost(TransactionV2ParamsAddress transactionV2ParamsAddress = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionV2ParamsAddress"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> TransactionPostWithHttpInfo(
            TransactionV2ParamsAddress transactionV2ParamsAddress = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionV2ParamsUnspent">Unspent parameters</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 TransactionPostUnspent(TransactionV2ParamsUnspent transactionV2ParamsUnspent);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionV2ParamsUnspent">Unspent parameters</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> TransactionPostUnspentWithHttpInfo(
            TransactionV2ParamsUnspent transactionV2ParamsUnspent);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Decode and verify an encoded transaction
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encodedtransaction"></param>
        /// <param name="unsigned"></param>
        /// <returns>Object</returns>
        Object TransactionVerify(string encodedtransaction, bool unsigned = false);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Decode and verify an encoded transaction
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encodedtransaction"></param>
        /// <param name="unsigned"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> TransactionVerifyWithHttpInfo(string encodedtransaction, bool unsigned = false);

        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>List<Transaction></returns>
        List<Transaction> TransactionsGet(string addrs = null, string confirmed = null);

        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>ApiResponse of List<Transaction></returns>
        ApiResponse<List<Transaction>> TransactionsGetWithHttpInfo(string addrs = null, string confirmed = null);

        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Object</returns>
        List<Transaction> TransactionsPost(string addrs = null, string confirmed = null);

        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>ApiResponse of List<Transaction></returns>
        ApiResponse<List<Transaction>> TransactionsPostWithHttpInfo(string addrs = null, string confirmed = null);

        /// <summary>
        /// Returns an unspent output by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>Object</returns>
        Object Uxout(string uxid = null);

        /// <summary>
        /// Returns an unspent output by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UxoutWithHttpInfo(string uxid = null);

        /// <summary>
        /// Verifies a Skycoin address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>Object</returns>
        Object VerifyAddress(Address address);

        /// <summary>
        /// Verifies a Skycoin address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> VerifyAddressWithHttpInfo(Address address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// versionHandler returns the application version info
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 Version();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// versionHandler returns the application version info
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> VersionWithHttpInfo();

        /// <summary>
        /// Returns a wallet by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Object</returns>
        Wallet Wallet(string id);

        /// <summary>
        /// Returns a wallet by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Wallet> WalletWithHttpInfo(string id);

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Balance</returns>
        Balance WalletBalance(string id);

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>ApiResponse of Balance</returns>
        ApiResponse<Balance> WalletBalanceWithHttpInfo(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a wallet
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">wallet seed passphrase [optional, bip44 type wallet only]</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="seedPassphrase">wallet seed passphrase [optional, bip44 type wallet only] (optional)</param>
        /// <param name="bip44Coin">BIP44 coin type [optional, defaults to 8000 (skycoin&#39;s coin type), only valid if type is \&quot;bip44\&quot;] (optional)</param>
        /// <param name="xpub">xpub key [required for xpub wallets] (optional)</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Object</returns>
        Wallet WalletCreate(string type, string label, string seed = null, string seedPassphrase = null,
            string bip44Coin = null, string xpub = null, int? scan = null, bool? encrypt = null,
            string password = null);

        /// <returns>Wallet</return>
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a wallet
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">wallet seed passphrase [optional, bip44 type wallet only]</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="seedPassphrase">wallet seed passphrase [optional, bip44 type wallet only] (optional)</param>
        /// <param name="bip44Coin">BIP44 coin type [optional, defaults to 8000 (skycoin&#39;s coin type), only valid if type is \&quot;bip44\&quot;] (optional)</param>
        /// <param name="xpub">xpub key [required for xpub wallets] (optional)</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>ApiResponse of Wallet</returns>
        ApiResponse<Wallet> WalletCreateWithHttpInfo(string type, string label, string seed = null,
            string seedPassphrase = null, string bip44Coin = null, string xpub = null, int? scan = null,
            bool? encrypt = null, string password = null);

        /// <summary>
        /// Decrypts wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Wallet</returns>
        Wallet WalletDecrypt(string id, string password);

        /// <summary>
        /// Decrypts wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of Wallet</returns>
        ApiResponse<Wallet> WalletDecryptWithHttpInfo(string id, string password);

        /// <summary>
        /// Encrypt wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Wallet</returns>
        Wallet WalletEncrypt(string id, string password);

        /// <summary>
        /// Encrypt wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of Wallet</returns>
        ApiResponse<Wallet> WalletEncryptWithHttpInfo(string id, string password);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 WalletFolder();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> WalletFolderWithHttpInfo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates new addresses
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Object</returns>
        Object WalletNewAddress(string id, int num = 1, string password = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates new addresses
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WalletNewAddressWithHttpInfo(string id, int num = 1, string password = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>Object</returns>
        Object WalletNewSeed(string entropy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WalletNewSeedWithHttpInfo(string entropy = null);

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
        /// </summary>
        /// <remarks>
        /// Recovers an encrypted wallet by providing the wallet seed and optional seed passphrase
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="seedPassphrase">Wallet seed-passphrase. (optional)</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>Object</returns>
        Object WalletRecover(string id, string seed, string seedPassphrase = null, string password = null);

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
        /// </summary>
        /// <remarks>
        /// Recovers an encrypted wallet by providing the wallet seed and optional seed passphrase
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="seedPassphrase">Wallet seed-passphrase. (optional)</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WalletRecoverWithHttpInfo(string id, string seed, string seedPassphrase = null,
            string password = null);

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Object</returns>
        Object WalletSeed(string id, string password);

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> WalletSeedWithHttpInfo(string id, string password);

        /// <summary>
        /// Verifies a wallet seed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Seed to be verified. (optional)</param>
        /// <returns>Object</returns>
        Object WalletSeedVerify(string seed = null);

        /// <summary>
        /// Verifies a wallet seed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Seed to be verified. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<object> WalletSeedVerifyWithHttpInfo(string seed = null);

        /// <summary>
        /// Creates a signed transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionRequest"></param>
        /// <returns>InlineResponse2008Data</returns>
        InlineResponse2008Data WalletTransaction(WalletTransactionRequest walletTransactionRequest);

        /// <summary>
        /// Creates a signed transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionRequest"></param>
        /// <returns>ApiResponse of InlineResponse2008Data</returns>
        ApiResponse<InlineResponse2008Data> WalletTransactionWithHttpInfo(
            WalletTransactionRequest walletTransactionRequest);

        /// <summary>
        /// Creates a signed transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionSignRequest"></param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 WalletTransactionSign(WalletTransactionSignRequest walletTransactionSignRequest);

        /// <summary>
        /// Creates a signed transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionSignRequest"></param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> WalletTransactionSignWithHttpInfo(
            WalletTransactionSignRequest walletTransactionSignRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 WalletTransactions(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> WalletTransactionsWithHttpInfo(string id);

        /// <summary>
        /// Unloads wallet from the wallet service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns></returns>
        void WalletUnload(string id);

        /// <summary>
        /// Unloads wallet from the wallet service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> WalletUnloadWithHttpInfo(string id);

        /// <summary>
        /// Update the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>string</returns>
        string WalletUpdate(string id, string label);

        /// <summary>
        /// Update the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> WalletUpdateWithHttpInfo(string id, string label);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all loaded wallets
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Object&gt;</returns>
        List<Wallet> Wallets();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all loaded wallets
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        ApiResponse<List<Wallet>> WalletsWithHttpInfo();

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        /// Returns the total number of unique address that have coins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> AddressCountAsync();

        /// <summary>
        /// Returns the total number of unique address that have coins.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> AddressCountAsyncWithHttpInfo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the historical, spent outputs associated with an address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Object>> AddressUxoutsAsync(string address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the historical, spent outputs associated with an address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Object>>> AddressUxoutsAsyncWithHttpInfo(string address);

        /// <summary>
        /// Get raw transaction by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiV1RawtxGetAsync(string txid);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get raw transaction by id
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id</param>
        /// <returns>Task of ApiResponse (object)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiV1RawtxGetAsyncWithHttpInfo(string txid);

        /// <summary>
        /// Prometheus metrics
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiV2MetricsGetAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Prometheus metrics
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiV2MetricsGetAsyncWithHttpInfo();

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of Balance</returns>
        System.Threading.Tasks.Task<Balance> BalanceGetAsync(string addrs);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of ApiResponse (Balance)</returns>
        System.Threading.Tasks.Task<ApiResponse<Balance>> BalanceGetAsyncWithHttpInfo(string addrs);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of Balance</returns>
        System.Threading.Tasks.Task<Balance> BalancePostAsync(string addrs);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of ApiResponse (Balance)</returns>
        System.Threading.Tasks.Task<ApiResponse<Balance>> BalancePostAsyncWithHttpInfo(string addrs);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">get block by hash (optional)</param>
        /// <param name="seq">get block by sequence number (optional)</param>
        /// <returns>Task of List&lt;BlockSchema&gt;</returns>
        System.Threading.Tasks.Task<BlockSchema> BlockAsync(string hash = null, int? seq = null);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">get block by hash (optional)</param>
        /// <param name="seq">get block by sequence number (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;BlockSchema&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockSchema>> BlockAsyncWithHttpInfo(string hash = null,
            int? seq = null);

        /// <summary>
        /// Returns the blockchain metadata.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BlockchainMetadataAsync();

        /// <summary>
        /// Returns the blockchain metadata.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BlockchainMetadataAsyncWithHttpInfo();

        /// <summary>
        /// Returns the blockchain sync progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BlockchainProgress</returns>
        System.Threading.Tasks.Task<BlockchainProgress> BlockchainProgressAsync();

        /// <summary>
        /// Returns the blockchain sync progress.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BlockchainProgress)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlockchainProgress>> BlockchainProgressAsyncWithHttpInfo();

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start seq (optional)</param>
        /// <param name="end">end seq (optional)</param>
        /// <param name="seqs">comma-separated list of block seqs (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> BlocksAsync(int? start = null, int? end = null,
            List<int?> seqs = null);

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start seq (optional)</param>
        /// <param name="end">end seq (optional)</param>
        /// <param name="seqs">comma-separated list of block seqs (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> BlocksAsyncWithHttpInfo(int? start = null,
            int? end = null, List<int?> seqs = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// coinSupplyHandler returns coin distribution supply stats
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> CoinSupplyAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// coinSupplyHandler returns coin distribution supply stats
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> CoinSupplyAsyncWithHttpInfo();

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> CsrfAsync();

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> CsrfAsyncWithHttpInfo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. (optional)</param>
        /// <param name="key">key of the specific value to get. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataDELETEAsync(string type = null, string key = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. (optional)</param>
        /// <param name="key">key of the specific value to get. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataDELETEAsyncWithHttpInfo(string type = null,
            string key = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. (optional)</param>
        /// <param name="key">key of the specific value to get. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> DataGETAsync(string type = null, string key = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. (optional)</param>
        /// <param name="key">key of the specific value to get. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>>
            DataGETAsyncWithHttpInfo(string type = null, string key = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. (optional)</param>
        /// <param name="key">key of the specific value to get. (optional)</param>
        /// <param name="val">additional value. (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DataPOSTAsync(string type = null, string key = null, string val = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. (optional)</param>
        /// <param name="key">key of the specific value to get. (optional)</param>
        /// <param name="val">additional value. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DataPOSTAsyncWithHttpInfo(string type = null,
            string key = null, string val = null);

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> DefaultConnectionsAsync();

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> DefaultConnectionsAsyncWithHttpInfo();

        /// <summary>
        /// Returns node health data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> HealthAsync();

        /// <summary>
        /// Returns node health data.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HealthAsyncWithHttpInfo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the most recent N blocks on the blockchain
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="num">Num of blockss</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> LastBlocksAsync(int? num);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the most recent N blocks on the blockchain
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="num">Num of blockss</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LastBlocksAsyncWithHttpInfo(int? num);

        /// <summary>
        /// This endpoint returns a specific connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of NetworkConnectionSchema</returns>
        System.Threading.Tasks.Task<NetworkConnectionSchema> NetworkConnectionAsync(string addr);

        /// <summary>
        /// This endpoint returns a specific connection.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of ApiResponse (NetworkConnectionSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<NetworkConnectionSchema>> NetworkConnectionAsyncWithHttpInfo(
            string addr);

        /// <summary>
        /// This endpoint returns all outgoings connections.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> NetworkConnectionsAsync(string states = null,
            string direction = null);

        /// <summary>
        /// This endpoint returns all outgoings connections.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> NetworkConnectionsAsyncWithHttpInfo(
            string states = null, string direction = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint disconnects a connection by ID or address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NetworkConnectionsDisconnectAsync(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint disconnects a connection by ID or address
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NetworkConnectionsDisconnectAsyncWithHttpInfo(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns all connections found through peer exchange
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> NetworkConnectionsExchangeAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// This endpoint returns all connections found through peer exchange
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> NetworkConnectionsExchangeAsyncWithHttpInfo();

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> NetworkConnectionsTrustAsync();

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> NetworkConnectionsTrustAsyncWithHttpInfo();

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Task of Outputs</returns>
        System.Threading.Tasks.Task<Outputs> OutputsGetAsync(List<string> address = null, List<string> hash = null);

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Task of ApiResponse (Outputs)</returns>
        System.Threading.Tasks.Task<ApiResponse<Outputs>> OutputsGetAsyncWithHttpInfo(List<string> address = null,
            List<string> hash = null);

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Task of Outputs</returns>
        System.Threading.Tasks.Task<Outputs> OutputsPostAsync(List<string> address = null, List<string> hash = null);

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Task of ApiResponse (Outputs)</returns>
        System.Threading.Tasks.Task<ApiResponse<Outputs>> OutputsPostAsyncWithHttpInfo(List<string> address = null,
            List<string> hash = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20010&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse20010>> PendingTxsAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20010&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20010>>> PendingTxsAsyncWithHttpInfo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ResendUnconfirmedTxnsAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResendUnconfirmedTxnsAsyncWithHttpInfo();

        /// <summary>
        /// Returns the top skycoin holders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RichlistAsync(bool? includeDistribution = null, string n = null);

        /// <summary>
        /// Returns the top skycoin holders.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RichlistAsyncWithHttpInfo(bool? includeDistribution = null,
            string n = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a transaction identified by its txid hash with just id
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction Id</param>
        /// <param name="encoded"></param>
        /// <returns>Task of Transaction</returns>
        System.Threading.Tasks.Task<Transaction> TransactionAsync(string txid, bool encoded = false);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a transaction identified by its txid hash with just id
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction Id</param>
        /// <param name="encoded"></param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Transaction>> TransactionAsyncWithHttpInfo(string txid,
            bool encoded = false);

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <param name="noBroadcast">Disable the network broadcast (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> TransactionInjectAsync(string rawtx, bool? noBroadcast = null);

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <param name="noBroadcast">Disable the network broadcast (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> TransactionInjectAsyncWithHttpInfo(string rawtx,
            bool? noBroadcast = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionV2ParamsAddress"> (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> TransactionPostAsync(
            TransactionV2ParamsAddress transactionV2ParamsAddress = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionV2ParamsAddress"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> TransactionPostAsyncWithHttpInfo(
            TransactionV2ParamsAddress transactionV2ParamsAddress = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionV2ParamsUnspent">Unspent parameters</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> TransactionPostUnspentAsync(
            TransactionV2ParamsUnspent transactionV2ParamsUnspent);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionV2ParamsUnspent">Unspent parameters</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> TransactionPostUnspentAsyncWithHttpInfo(
            TransactionV2ParamsUnspent transactionV2ParamsUnspent);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Decode and verify an encoded transaction
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encodedtransaction"></param>
        /// <param name="unsigned"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> TransactionVerifyAsync(string encodedtransaction, bool unsigned = false);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Decode and verify an encoded transaction
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encodedtransaction"></param>
        /// <param name="unsigned"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TransactionVerifyAsyncWithHttpInfo(
            string encodedtransaction, bool unsigned = false);

        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<List<Transaction>> TransactionsGetAsync(string addrs = null,
            string confirmed = null);

        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Transaction>>> TransactionsGetAsyncWithHttpInfo(
            string addrs = null,
            string confirmed = null);

        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<List<Transaction>> TransactionsPostAsync(string addrs = null,
            string confirmed = null);

        /// <summary>
        /// Returns transactions that match the filters.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Transaction>>> TransactionsPostAsyncWithHttpInfo(
            string addrs = null,
            string confirmed = null);

        /// <summary>
        /// Returns an unspent output by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UxoutAsync(string uxid = null);

        /// <summary>
        /// Returns an unspent output by ID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UxoutAsyncWithHttpInfo(string uxid = null);

        /// <summary>
        /// Verifies a Skycoin address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> VerifyAddressAsync(Address address);

        /// <summary>
        /// Verifies a Skycoin address.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> VerifyAddressAsyncWithHttpInfo(Address address);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// versionHandler returns the application version info
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> VersionAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// versionHandler returns the application version info
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> VersionAsyncWithHttpInfo();

        /// <summary>
        /// Returns a wallet by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Wallet> WalletAsync(string id);

        /// <summary>
        /// Returns a wallet by id.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Wallet>> WalletAsyncWithHttpInfo(string id);

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of Balance</returns>
        System.Threading.Tasks.Task<Balance> WalletBalanceAsync(string id);

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of ApiResponse (Balance)</returns>
        System.Threading.Tasks.Task<ApiResponse<Balance>> WalletBalanceAsyncWithHttpInfo(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a wallet
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">wallet seed passphrase [optional, bip44 type wallet only]</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="seedPassphrase">wallet seed passphrase [optional, bip44 type wallet only] (optional)</param>
        /// <param name="bip44Coin">BIP44 coin type [optional, defaults to 8000 (skycoin&#39;s coin type), only valid if type is \&quot;bip44\&quot;] (optional)</param>
        /// <param name="xpub">xpub key [required for xpub wallets] (optional)</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of Wallet</returns>
        System.Threading.Tasks.Task<Wallet> WalletCreateAsync(string type, string label, string seed = null,
            string seedPassphrase = null, string bip44Coin = null, string xpub = null, int? scan = null,
            bool? encrypt = null, string password = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a wallet
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">wallet seed passphrase [optional, bip44 type wallet only]</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="seedPassphrase">wallet seed passphrase [optional, bip44 type wallet only] (optional)</param>
        /// <param name="bip44Coin">BIP44 coin type [optional, defaults to 8000 (skycoin&#39;s coin type), only valid if type is \&quot;bip44\&quot;] (optional)</param>
        /// <param name="xpub">xpub key [required for xpub wallets] (optional)</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        System.Threading.Tasks.Task<ApiResponse<Wallet>> WalletCreateAsyncWithHttpInfo(string type, string label,
            string seed = null, string seedPassphrase = null, string bip44Coin = null, string xpub = null,
            int? scan = null, bool? encrypt = null, string password = null);

        /// <summary>
        /// Decrypts wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of Wallet</returns>
        System.Threading.Tasks.Task<Wallet> WalletDecryptAsync(string id, string password);

        /// <summary>
        /// Decrypts wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        System.Threading.Tasks.Task<ApiResponse<Wallet>> WalletDecryptAsyncWithHttpInfo(string id, string password);

        /// <summary>
        /// Encrypt wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of Wallet</returns>
        System.Threading.Tasks.Task<Wallet> WalletEncryptAsync(string id, string password);

        /// <summary>
        /// Encrypt wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        System.Threading.Tasks.Task<ApiResponse<Wallet>> WalletEncryptAsyncWithHttpInfo(string id, string password);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> WalletFolderAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> WalletFolderAsyncWithHttpInfo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates new addresses
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletNewAddressAsync(string id, int num = 1, string password = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Generates new addresses
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletNewAddressAsyncWithHttpInfo(string id, int num = 1,
            string password = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletNewSeedAsync(string entropy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the wallet directory path
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletNewSeedAsyncWithHttpInfo(string entropy = null);

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
        /// </summary>
        /// <remarks>
        /// Recovers an encrypted wallet by providing the wallet seed and optional seed passphrase
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="seedPassphrase">Wallet seed-passphrase. (optional)</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletRecoverAsync(string id, string seed, string seedPassphrase = null,
            string password = null);

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned.
        /// </summary>
        /// <remarks>
        /// Recovers an encrypted wallet by providing the wallet seed and optional seed passphrase
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="seedPassphrase">Wallet seed-passphrase. (optional)</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletRecoverAsyncWithHttpInfo(string id, string seed,
            string seedPassphrase = null, string password = null);

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletSeedAsync(string id, string password);

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletSeedAsyncWithHttpInfo(string id, string password);

        /// <summary>
        /// Verifies a wallet seed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Seed to be verified. (optional)</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> WalletSeedVerifyAsync(string seed = null);

        /// <summary>
        /// Verifies a wallet seed.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Seed to be verified. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletSeedVerifyAsyncWithHttpInfo(string seed = null);

        /// <summary>
        /// Creates a signed transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionRequest"></param>
        /// <returns>Task of InlineResponse2008Data</returns>
        System.Threading.Tasks.Task<InlineResponse2008Data> WalletTransactionAsync(
            WalletTransactionRequest walletTransactionRequest);

        /// <summary>
        /// Creates a signed transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionRequest"></param>
        /// <returns>Task of ApiResponse (InlineResponse2008Data)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008Data>> WalletTransactionAsyncWithHttpInfo(
            WalletTransactionRequest walletTransactionRequest);

        /// <summary>
        /// Creates a signed transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionSignRequest"></param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> WalletTransactionSignAsync(
            WalletTransactionSignRequest walletTransactionSignRequest);

        /// <summary>
        /// Creates a signed transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionSignRequest"></param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> WalletTransactionSignAsyncWithHttpInfo(
            WalletTransactionSignRequest walletTransactionSignRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> WalletTransactionsAsync(string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> WalletTransactionsAsyncWithHttpInfo(string id);

        /// <summary>
        /// Unloads wallet from the wallet service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task WalletUnloadAsync(string id);

        /// <summary>
        /// Unloads wallet from the wallet service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> WalletUnloadAsyncWithHttpInfo(string id);

        /// <summary>
        /// Update the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> WalletUpdateAsync(string id, string label);

        /// <summary>
        /// Update the wallet.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> WalletUpdateAsyncWithHttpInfo(string id, string label);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all loaded wallets
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Object&gt;</returns>
        System.Threading.Tasks.Task<List<Wallet>> WalletsAsync();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns all loaded wallets
        /// </remarks>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Wallet>>> WalletsAsyncWithHttpInfo();

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Skyapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Skyapi.Client.Configuration {BasePath = basePath};

            ExceptionFactory = Skyapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = Skyapi.Client.Configuration.Default;

            ExceptionFactory = Skyapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Skyapi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Skyapi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Skyapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete(
            "SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Skyapi.Client.Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Skyapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }

                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Returns the total number of unique address that have coins. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 AddressCount()
        {
            ApiResponse<InlineResponse200> localVarResponse = AddressCountWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the total number of unique address that have coins. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> AddressCountWithHttpInfo()
        {
            var localVarPath = "/api/v1/addresscount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse200)));
        }

        /// <summary>
        /// Returns the total number of unique address that have coins. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> AddressCountAsync()
        {
            ApiResponse<InlineResponse200> localVarResponse = await AddressCountAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the total number of unique address that have coins. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> AddressCountAsyncWithHttpInfo()
        {
            var localVarPath = "/api/v1/addresscount";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressCount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse200)));
        }

        /// <summary>
        ///  Returns the historical, spent outputs associated with an address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by</param>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Object> AddressUxouts(string address)
        {
            ApiResponse<List<Object>> localVarResponse = AddressUxoutsWithHttpInfo(address);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the historical, spent outputs associated with an address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by</param>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse<List<Object>> AddressUxoutsWithHttpInfo(string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400,
                    "Missing required parameter 'address' when calling DefaultApi->AddressUxouts");

            var localVarPath = "/api/v1/address_uxouts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressUxouts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        ///  Returns the historical, spent outputs associated with an address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by</param>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Object>> AddressUxoutsAsync(string address)
        {
            ApiResponse<List<Object>> localVarResponse = await AddressUxoutsAsyncWithHttpInfo(address);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the historical, spent outputs associated with an address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">address to filter by</param>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Object>>> AddressUxoutsAsyncWithHttpInfo(
            string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400,
                    "Missing required parameter 'address' when calling DefaultApi->AddressUxouts");

            var localVarPath = "/api/v1/address_uxouts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "address", address)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressUxouts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Object>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Object>)));
        }

        /// <summary>
        /// Get raw transaction by id
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id</param>
        /// <returns>string</returns>
        public string ApiV1RawtxGet(string txid)
        {
            ApiResponse<object> localVarResponse = ApiV1RawtxGetWithHttpInfo(txid);
            return localVarResponse.Data.ToString();
        }

        /// <summary>
        ///  Get raw transaction by id
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<object> ApiV1RawtxGetWithHttpInfo(string txid)
        {
            var localVarPath = "/api/v1/rawtx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "text/plain"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RawtxGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(object)));
        }

        /// <summary>
        /// Get raw transaction by id
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiV1RawtxGetAsync(string txid)
        {
            ApiResponse<string> localVarResponse = await ApiV1RawtxGetAsyncWithHttpInfo(txid);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get raw transaction by id
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">Transaction id</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiV1RawtxGetAsyncWithHttpInfo(string txid)
        {
            var localVarPath = "/api/v1/rawtx";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "text/plain"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV1RawtxGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Prometheus metrics
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string ApiV2MetricsGet()
        {
            ApiResponse<string> localVarResponse = ApiV2MetricsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Prometheus metrics
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> ApiV2MetricsGetWithHttpInfo()
        {
            var localVarPath = "/api/v2/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "text/plain"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2MetricsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Prometheus metrics
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiV2MetricsGetAsync()
        {
            ApiResponse<string> localVarResponse = await ApiV2MetricsGetAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Prometheus metrics
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ApiV2MetricsGetAsyncWithHttpInfo()
        {
            var localVarPath = "/api/v2/metrics";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "text/plain"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiV2MetricsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Balance</returns>
        public Balance BalanceGet(string addrs)
        {
            ApiResponse<Balance> localVarResponse = BalanceGetWithHttpInfo(addrs);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>ApiResponse of Balance</returns>
        public ApiResponse<Balance> BalanceGetWithHttpInfo(string addrs)
        {
            // verify the required parameter 'addrs' is set
            if (addrs == null)
                throw new ApiException(400, "Missing required parameter 'addrs' when calling DefaultApi->BalanceGet");

            var localVarPath = "/api/v1/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BalanceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Balance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Balance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Balance)));
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of Balance</returns>
        public async System.Threading.Tasks.Task<Balance> BalanceGetAsync(string addrs)
        {
            ApiResponse<Balance> localVarResponse = await BalanceGetAsyncWithHttpInfo(addrs);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of ApiResponse (Balance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Balance>> BalanceGetAsyncWithHttpInfo(string addrs)
        {
            // verify the required parameter 'addrs' is set
            if (addrs == null)
                throw new ApiException(400, "Missing required parameter 'addrs' when calling DefaultApi->BalanceGet");

            var localVarPath = "/api/v1/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BalanceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Balance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Balance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Balance)));
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Balance</returns>
        public Balance BalancePost(string addrs)
        {
            ApiResponse<Balance> localVarResponse = BalancePostWithHttpInfo(addrs);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>ApiResponse of Balance</returns>
        public ApiResponse<Balance> BalancePostWithHttpInfo(string addrs)
        {
            // verify the required parameter 'addrs' is set
            if (addrs == null)
                throw new ApiException(400, "Missing required parameter 'addrs' when calling DefaultApi->BalancePost");

            var localVarPath = "/api/v1/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BalancePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Balance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Balance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Balance)));
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of Balance</returns>
        public async System.Threading.Tasks.Task<Balance> BalancePostAsync(string addrs)
        {
            ApiResponse<Balance> localVarResponse = await BalancePostAsyncWithHttpInfo(addrs);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses</param>
        /// <returns>Task of ApiResponse (Balance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Balance>> BalancePostAsyncWithHttpInfo(string addrs)
        {
            // verify the required parameter 'addrs' is set
            if (addrs == null)
                throw new ApiException(400, "Missing required parameter 'addrs' when calling DefaultApi->BalancePost");

            var localVarPath = "/api/v1/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BalancePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Balance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Balance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Balance)));
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">get block by hash (optional)</param>
        /// <param name="seq">get block by sequence number (optional)</param>
        /// <returns>BlockSchema</returns>
        public BlockSchema Block(string hash = null, int? seq = null)
        {
            ApiResponse<BlockSchema> localVarResponse = BlockWithHttpInfo(hash, seq);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">get block by hash (optional)</param>
        /// <param name="seq">get block by sequence number (optional)</param>
        /// <returns>ApiResponse of BlockSchema</returns>
        public ApiResponse<BlockSchema> BlockWithHttpInfo(string hash = null, int? seq = null)
        {
            var localVarPath = "/api/v1/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter
            if (seq != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seq", seq)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Block", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BlockSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockSchema)));
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">get block by hash (optional)</param>
        /// <param name="seq">get block by sequence number (optional)</param>
        /// <returns>Task of BlockSchema</returns>
        public async System.Threading.Tasks.Task<BlockSchema> BlockAsync(string hash = null, int? seq = null)
        {
            ApiResponse<BlockSchema> localVarResponse = await BlockAsyncWithHttpInfo(hash, seq);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hash">get block by hash (optional)</param>
        /// <param name="seq">get block by sequence number (optional)</param>
        /// <returns>Task of ApiResponse (BlockSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockSchema>> BlockAsyncWithHttpInfo(string hash = null,
            int? seq = null)
        {
            var localVarPath = "/api/v1/block";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hash != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hash", hash)); // query parameter
            if (seq != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seq", seq)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Block", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BlockSchema) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlockSchema)));
        }

        /// <summary>
        /// Returns the blockchain metadata. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object BlockchainMetadata()
        {
            ApiResponse<Object> localVarResponse = BlockchainMetadataWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the blockchain metadata. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> BlockchainMetadataWithHttpInfo()
        {
            var localVarPath = "/api/v1/blockchain/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockchainMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the blockchain metadata. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BlockchainMetadataAsync()
        {
            ApiResponse<Object> localVarResponse = await BlockchainMetadataAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the blockchain metadata. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> BlockchainMetadataAsyncWithHttpInfo()
        {
            var localVarPath = "/api/v1/blockchain/metadata";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockchainMetadata", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the blockchain sync progress. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BlockchainProgress</returns>
        public BlockchainProgress BlockchainProgress()
        {
            ApiResponse<BlockchainProgress> localVarResponse = BlockchainProgressWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the blockchain sync progress. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BlockchainProgress</returns>
        public ApiResponse<BlockchainProgress> BlockchainProgressWithHttpInfo()
        {
            var localVarPath = "/api/v1/blockchain/progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockchainProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockchainProgress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BlockchainProgress) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(BlockchainProgress)));
        }

        /// <summary>
        /// Returns the blockchain sync progress. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of BlockchainProgress</returns>
        public async System.Threading.Tasks.Task<BlockchainProgress> BlockchainProgressAsync()
        {
            ApiResponse<BlockchainProgress> localVarResponse = await BlockchainProgressAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the blockchain sync progress. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (BlockchainProgress)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlockchainProgress>> BlockchainProgressAsyncWithHttpInfo()
        {
            var localVarPath = "/api/v1/blockchain/progress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BlockchainProgress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlockchainProgress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BlockchainProgress) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(BlockchainProgress)));
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start seq (optional)</param>
        /// <param name="end">end seq (optional)</param>
        /// <param name="seqs">comma-separated list of block seqs (optional)</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 Blocks(int? start = null, int? end = null, List<int?> seqs = null)
        {
            ApiResponse<InlineResponse2001> localVarResponse = BlocksWithHttpInfo(start, end, seqs);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start seq (optional)</param>
        /// <param name="end">end seq (optional)</param>
        /// <param name="seqs">comma-separated list of block seqs (optional)</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse<InlineResponse2001> BlocksWithHttpInfo(int? start = null, int? end = null,
            List<int?> seqs = null)
        {
            var localVarPath = "/api/v1/blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (seqs != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seqs",
                        string.Join(",", seqs))); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Blocks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start seq (optional)</param>
        /// <param name="end">end seq (optional)</param>
        /// <param name="seqs">comma-separated list of block seqs (optional)</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> BlocksAsync(int? start = null, int? end = null,
            List<int?> seqs = null)
        {
            ApiResponse<InlineResponse2001> localVarResponse = await BlocksAsyncWithHttpInfo(start, end, seqs);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the balance of one or more addresses, both confirmed and predicted. The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">start seq (optional)</param>
        /// <param name="end">end seq (optional)</param>
        /// <param name="seqs">comma-separated list of block seqs (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> BlocksAsyncWithHttpInfo(
            int? start = null, int? end = null, List<int?> seqs = null)
        {
            var localVarPath = "/api/v1/blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (start != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "start", start)); // query parameter
            if (end != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "end", end)); // query parameter
            if (seqs != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "seqs",
                        string.Join(",", seqs))); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Blocks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2001)));
        }

        /// <summary>
        ///  coinSupplyHandler returns coin distribution supply stats
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 CoinSupply()
        {
            ApiResponse<InlineResponse2002> localVarResponse = CoinSupplyWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  coinSupplyHandler returns coin distribution supply stats
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse<InlineResponse2002> CoinSupplyWithHttpInfo()
        {
            var localVarPath = "/api/v1/coinSupply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CoinSupply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2002)));
        }

        /// <summary>
        ///  coinSupplyHandler returns coin distribution supply stats
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> CoinSupplyAsync()
        {
            ApiResponse<InlineResponse2002> localVarResponse = await CoinSupplyAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  coinSupplyHandler returns coin distribution supply stats
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> CoinSupplyAsyncWithHttpInfo()
        {
            var localVarPath = "/api/v1/coinSupply";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CoinSupply", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 Csrf()
        {
            ApiResponse<InlineResponse2003> localVarResponse = CsrfWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> CsrfWithHttpInfo()
        {
            var localVarPath = "/api/v1/csrf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Csrf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> CsrfAsync()
        {
            ApiResponse<InlineResponse2003> localVarResponse = await CsrfAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a new CSRF token. Previous CSRF tokens are invalidated by this call. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> CsrfAsyncWithHttpInfo()
        {
            var localVarPath = "/api/v1/csrf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Csrf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2003)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. </param>
        /// <param name="key">key of the specific value to get. </param>
        /// <returns></returns>
        public void DataDELETE(string type, string key)
        {
            DataDELETEWithHttpInfo(type, key);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. </param>
        /// <param name="key">key of the specific value to get. </param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataDELETEWithHttpInfo(string type, string key)
        {
            var localVarPath = "/api/v2/data";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[]
            {
            };
            var localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml"
            };
            var localVarHttpHeaderAccept =
                Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (key != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. </param>
        /// <param name="key">key of the specific value to get. </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataDELETEAsync(string type, string key)
        {
            await DataDELETEAsyncWithHttpInfo(type, key);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. </param>
        /// <param name="key">key of the specific value to get. </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataDELETEAsyncWithHttpInfo(string type,
            string key)
        {
            var localVarPath = "/api/v2/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new String[]
            {
            };
            var localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
                "application/xml"
            };
            var localVarHttpHeaderAccept =
                Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (key != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataDELETE", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. </param>
        /// <param name="key">key of the specific value to get.(optional)</param>
        /// <returns>Object</returns>
        public Object DataGET(string type, string key = null)
        {
            ApiResponse<Object> localVarResponse = DataGETWithHttpInfo(type, key);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. </param>
        /// <param name="key">key of the specific value to get.(optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> DataGETWithHttpInfo(string type, string key = null)
        {
            var localVarPath = "/api/v2/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new String[]
            {
            };
            var localVarHttpContentType =
                Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
                "application/xml",
            };
            var localVarHttpHeaderAccept =
                Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (key != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. </param>
        /// <param name="key">key of the specific value to get. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> DataGETAsync(string type, string key = null)
        {
            ApiResponse<Object> localVarResponse = await DataGETAsyncWithHttpInfo(type, key);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type.</param>
        /// <param name="key">key of the specific value to get. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataGETAsyncWithHttpInfo(string type = null,
            string key = null)
        {
            var localVarPath = "/api/v2/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (key != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", key)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataGET", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. </param>
        /// <param name="key">key of the specific value to get. </param>
        /// <param name="val">additional value. (optional)</param>
        /// <returns></returns>
        public void DataPOST(string type, string key, string val = null)
        {
            DataPOSTWithHttpInfo(type, key, val);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type.</param>
        /// <param name="key">key of the specific value to get.</param>
        /// <param name="val">additional value. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DataPOSTWithHttpInfo(string type, string key, string val = null)
        {
            var localVarPath = "/api/v2/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPostBody = JsonConvert.SerializeObject(new
            {
                type = type,
                key = key,
                val = val
            });

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. </param>
        /// <param name="key">key of the specific value to get. </param>
        /// <param name="val">additional value. (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DataPOSTAsync(string type, string key, string val = null)
        {
            await DataPOSTAsyncWithHttpInfo(type, key, val);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">storage type. </param>
        /// <param name="key">key of the specific value to get.</param>
        /// <param name="val">additional value. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DataPOSTAsyncWithHttpInfo(string type,
            string key, string val = null)
        {
            var localVarPath = "/api/v2/data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPostBody = JsonConvert.SerializeObject(new
            {
                type = type,
                key = key,
                val = val
            });

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DataPOST", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> DefaultConnections()
        {
            ApiResponse<List<string>> localVarResponse = DefaultConnectionsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> DefaultConnectionsWithHttpInfo()
        {
            var localVarPath = "/api/v1/network/defaultConnections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DefaultConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> DefaultConnectionsAsync()
        {
            ApiResponse<List<string>> localVarResponse = await DefaultConnectionsAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// defaultConnectionsHandler returns the list of default hardcoded bootstrap addresses.\\n They are not necessarily connected to. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> DefaultConnectionsAsyncWithHttpInfo()
        {
            var localVarPath = "/api/v1/network/defaultConnections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DefaultConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// Returns node health data. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object Health()
        {
            ApiResponse<Object> localVarResponse = HealthWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns node health data. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> HealthWithHttpInfo()
        {
            var localVarPath = "/api/v1/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Health", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns node health data. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> HealthAsync()
        {
            ApiResponse<Object> localVarResponse = await HealthAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns node health data. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HealthAsyncWithHttpInfo()
        {
            var localVarPath = "/api/v1/health";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Health", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the most recent N blocks on the blockchain
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="num">Num of blockss</param>
        /// <returns>Object</returns>
        public Object LastBlocks(int? num)
        {
            ApiResponse<Object> localVarResponse = LastBlocksWithHttpInfo(num);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the most recent N blocks on the blockchain
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="num">Num of blockss</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> LastBlocksWithHttpInfo(int? num)
        {
            // verify the required parameter 'num' is set
            if (num == null)
                throw new ApiException(400, "Missing required parameter 'num' when calling DefaultApi->LastBlocks");

            var localVarPath = "/api/v1/last_blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (num != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "num", num)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LastBlocks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the most recent N blocks on the blockchain
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="num">Num of blockss</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> LastBlocksAsync(int? num)
        {
            ApiResponse<Object> localVarResponse = await LastBlocksAsyncWithHttpInfo(num);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the most recent N blocks on the blockchain
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="num">Num of blockss</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LastBlocksAsyncWithHttpInfo(int? num)
        {
            // verify the required parameter 'num' is set
            if (num == null)
                throw new ApiException(400, "Missing required parameter 'num' when calling DefaultApi->LastBlocks");

            var localVarPath = "/api/v1/last_blocks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (num != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "num", num)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LastBlocks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This endpoint returns a specific connection. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>NetworkConnectionSchema</returns>
        public NetworkConnectionSchema NetworkConnection(string addr)
        {
            ApiResponse<NetworkConnectionSchema> localVarResponse = NetworkConnectionWithHttpInfo(addr);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns a specific connection. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>ApiResponse of NetworkConnectionSchema</returns>
        public ApiResponse<NetworkConnectionSchema> NetworkConnectionWithHttpInfo(string addr)
        {
            // verify the required parameter 'addr' is set
            if (addr == null)
                throw new ApiException(400,
                    "Missing required parameter 'addr' when calling DefaultApi->NetworkConnection");

            var localVarPath = "/api/v1/network/connection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addr != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addr", addr)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkConnectionSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NetworkConnectionSchema) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(NetworkConnectionSchema)));
        }

        /// <summary>
        /// This endpoint returns a specific connection. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of NetworkConnectionSchema</returns>
        public async System.Threading.Tasks.Task<NetworkConnectionSchema> NetworkConnectionAsync(string addr)
        {
            ApiResponse<NetworkConnectionSchema> localVarResponse = await NetworkConnectionAsyncWithHttpInfo(addr);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns a specific connection. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addr">Address port</param>
        /// <returns>Task of ApiResponse (NetworkConnectionSchema)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NetworkConnectionSchema>>
            NetworkConnectionAsyncWithHttpInfo(string addr)
        {
            // verify the required parameter 'addr' is set
            if (addr == null)
                throw new ApiException(400,
                    "Missing required parameter 'addr' when calling DefaultApi->NetworkConnection");

            var localVarPath = "/api/v1/network/connection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addr != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addr", addr)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NetworkConnectionSchema>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (NetworkConnectionSchema) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(NetworkConnectionSchema)));
        }

        /// <summary>
        /// This endpoint returns all outgoings connections. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 NetworkConnections(string states = null, string direction = null)
        {
            ApiResponse<InlineResponse2004> localVarResponse = NetworkConnectionsWithHttpInfo(states, direction);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns all outgoings connections. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse<InlineResponse2004> NetworkConnectionsWithHttpInfo(string states = null,
            string direction = null)
        {
            var localVarPath = "/api/v1/network/connections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (states != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "states", states)); // query parameter
            if (direction != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction",
                        direction)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2004)));
        }

        /// <summary>
        /// This endpoint returns all outgoings connections. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> NetworkConnectionsAsync(string states = null,
            string direction = null)
        {
            ApiResponse<InlineResponse2004> localVarResponse =
                await NetworkConnectionsAsyncWithHttpInfo(states, direction);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns all outgoings connections. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="states">Connection status. (optional)</param>
        /// <param name="direction">Direction of the connection. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> NetworkConnectionsAsyncWithHttpInfo(
            string states = null, string direction = null)
        {
            var localVarPath = "/api/v1/network/connections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (states != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "states", states)); // query parameter
            if (direction != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction",
                        direction)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2004)));
        }

        /// <summary>
        ///  This endpoint disconnects a connection by ID or address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns></returns>
        public void NetworkConnectionsDisconnect(string id)
        {
            NetworkConnectionsDisconnectWithHttpInfo(id);
        }

        /// <summary>
        ///  This endpoint disconnects a connection by ID or address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NetworkConnectionsDisconnectWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling DefaultApi->NetworkConnectionsDisconnect");

            var localVarPath = "/api/v1/network/connection/disconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsDisconnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  This endpoint disconnects a connection by ID or address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NetworkConnectionsDisconnectAsync(string id)
        {
            await NetworkConnectionsDisconnectAsyncWithHttpInfo(id);
        }

        /// <summary>
        ///  This endpoint disconnects a connection by ID or address
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Address id.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>>
            NetworkConnectionsDisconnectAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling DefaultApi->NetworkConnectionsDisconnect");

            var localVarPath = "/api/v1/network/connection/disconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsDisconnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///  This endpoint returns all connections found through peer exchange
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> NetworkConnectionsExchange()
        {
            ApiResponse<List<string>> localVarResponse = NetworkConnectionsExchangeWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint returns all connections found through peer exchange
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> NetworkConnectionsExchangeWithHttpInfo()
        {
            var localVarPath = "/api/v1/network/connections/exchange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsExchange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        ///  This endpoint returns all connections found through peer exchange
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> NetworkConnectionsExchangeAsync()
        {
            ApiResponse<List<string>> localVarResponse = await NetworkConnectionsExchangeAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  This endpoint returns all connections found through peer exchange
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>>
            NetworkConnectionsExchangeAsyncWithHttpInfo()
        {
            var localVarPath = "/api/v1/network/connections/exchange";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsExchange", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> NetworkConnectionsTrust()
        {
            ApiResponse<List<string>> localVarResponse = NetworkConnectionsTrustWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public ApiResponse<List<string>> NetworkConnectionsTrustWithHttpInfo()
        {
            var localVarPath = "/api/v1/network/connections/trust";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsTrust", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> NetworkConnectionsTrustAsync()
        {
            ApiResponse<List<string>> localVarResponse = await NetworkConnectionsTrustAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// trustConnectionsHandler returns all trusted connections.\\n They are not necessarily connected to. In the default configuration, these will be a subset of the default hardcoded bootstrap addresses. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<string>>> NetworkConnectionsTrustAsyncWithHttpInfo()
        {
            var localVarPath = "/api/v1/network/connections/trust";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NetworkConnectionsTrust", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<string>)));
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Outputs</returns>
        public Outputs OutputsGet(List<string> address = null, List<string> hash = null)
        {
            ApiResponse<Outputs> localVarResponse = OutputsGetWithHttpInfo(address, hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>ApiResponse of Outputs</returns>
        public ApiResponse<Outputs> OutputsGetWithHttpInfo(List<string> address = null, List<string> hash = null)
        {
            var localVarPath = "/api/v1/outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs",
                        string.Join(",", address))); // query parameter
            if (hash != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hashes",
                        string.Join(",", hash))); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OutputsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Outputs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Outputs) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Outputs)));
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Task of Outputs</returns>
        public async System.Threading.Tasks.Task<Outputs> OutputsGetAsync(List<string> address = null,
            List<string> hash = null)
        {
            ApiResponse<Outputs> localVarResponse = await OutputsGetAsyncWithHttpInfo(address, hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Task of ApiResponse (Outputs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Outputs>> OutputsGetAsyncWithHttpInfo(
            List<string> address = null, List<string> hash = null)
        {
            var localVarPath = "/api/v1/outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs",
                        string.Join(",", address))); // query parameter
            if (hash != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hashes",
                        string.Join(",", hash))); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OutputsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Outputs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Outputs) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Outputs)));
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Outputs</returns>
        public Outputs OutputsPost(List<string> address = null, List<string> hash = null)
        {
            ApiResponse<Outputs> localVarResponse = OutputsPostWithHttpInfo(address, hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>ApiResponse of Outputs</returns>
        public ApiResponse<Outputs> OutputsPostWithHttpInfo(List<string> address = null, List<string> hash = null)
        {
            var localVarPath = "/api/v1/outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs",
                        string.Join(",", address))); // query parameter
            if (hash != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "hashes",
                        string.Join(",", hash))); // query parameter

            // authentication (csrfAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OutputsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Outputs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Outputs) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Outputs)));
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Task of Outputs</returns>
        public async System.Threading.Tasks.Task<Outputs> OutputsPostAsync(List<string> address = null,
            List<string> hash = null)
        {
            ApiResponse<Outputs> localVarResponse = await OutputsPostAsyncWithHttpInfo(address, hash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// If neither addrs nor hashes are specificed, return all unspent outputs. If only one filter is specified, then return outputs match the filter. Both filters cannot be specified. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address"> (optional)</param>
        /// <param name="hash"> (optional)</param>
        /// <returns>Task of ApiResponse (Outputs)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Outputs>> OutputsPostAsyncWithHttpInfo(
            List<string> address = null, List<string> hash = null)
        {
            var localVarPath = "/api/v1/outputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs",
                        string.Join(",", address))); // query parameter
            if (hash != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "hashes",
                        string.Join(",", hash))); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OutputsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Outputs>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Outputs) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Outputs)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse20010&gt;</returns>
        public List<InlineResponse20010> PendingTxs()
        {
            ApiResponse<List<InlineResponse20010>> localVarResponse = PendingTxsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse20010&gt;</returns>
        public ApiResponse<List<InlineResponse20010>> PendingTxsWithHttpInfo()
        {
            var localVarPath = "/api/v1/pendingTxs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PendingTxs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20010>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20010>) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(List<InlineResponse20010>)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse20010&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse20010>> PendingTxsAsync()
        {
            ApiResponse<List<InlineResponse20010>> localVarResponse = await PendingTxsAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse20010&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse20010>>> PendingTxsAsyncWithHttpInfo()
        {
            var localVarPath = "/api/v1/pendingTxs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PendingTxs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse20010>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse20010>) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(List<InlineResponse20010>)));
        }

        /// <summary>
        ///  Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object ResendUnconfirmedTxns()
        {
            ApiResponse<Object> localVarResponse = ResendUnconfirmedTxnsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> ResendUnconfirmedTxnsWithHttpInfo()
        {
            var localVarPath = "/api/v1/resendUnconfirmedTxns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application-json",
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendUnconfirmedTxns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ResendUnconfirmedTxnsAsync()
        {
            ApiResponse<Object> localVarResponse = await ResendUnconfirmedTxnsAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Broadcasts all unconfirmed transactions from the unconfirmed transaction pool
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ResendUnconfirmedTxnsAsyncWithHttpInfo()
        {
            var localVarPath = "/api/v1/resendUnconfirmedTxns";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application-json",
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendUnconfirmedTxns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the top skycoin holders. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>Object</returns>
        public Object Richlist(bool? includeDistribution = null, string n = null)
        {
            ApiResponse<Object> localVarResponse = RichlistWithHttpInfo(includeDistribution, n);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the top skycoin holders. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> RichlistWithHttpInfo(bool? includeDistribution = null, string n = null)
        {
            var localVarPath = "/api/v1/richlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeDistribution != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include-distribution",
                        includeDistribution)); // query parameter
            if (n != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Richlist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns the top skycoin holders. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RichlistAsync(bool? includeDistribution = null,
            string n = null)
        {
            ApiResponse<Object> localVarResponse = await RichlistAsyncWithHttpInfo(includeDistribution, n);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the top skycoin holders. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDistribution">include distribution addresses or not, default value false (optional)</param>
        /// <param name="n">include distribution addresses or not, default value false (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RichlistAsyncWithHttpInfo(
            bool? includeDistribution = null, string n = null)
        {
            var localVarPath = "/api/v1/richlist";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (includeDistribution != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "include-distribution",
                        includeDistribution)); // query parameter
            if (n != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "n", n)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Richlist", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns a transaction identified by its txid hash with just id
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction Id</param>
        /// <param name="encoded"></param>
        /// <returns>Transaction</returns>
        public Transaction Transaction(string txid, bool encoded = false)
        {
            ApiResponse<Transaction> localVarResponse = TransactionWithHttpInfo(txid, encoded);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a transaction identified by its txid hash with just id
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction Id</param>
        /// <param name="encoded"></param>
        /// <returns>ApiResponse of Transaction</returns>
        public ApiResponse<Transaction> TransactionWithHttpInfo(string txid, bool encoded = false)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling DefaultApi->Transaction");

            var localVarPath = "/api/v1/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "encoded", encoded)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Transaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        ///  Returns a transaction identified by its txid hash with just id
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction Id</param>
        /// <param name="encoded"></param>
        /// <returns>Task of Transaction</returns>
        public async System.Threading.Tasks.Task<Transaction> TransactionAsync(string txid, bool encoded = false)
        {
            ApiResponse<Transaction> localVarResponse = await TransactionAsyncWithHttpInfo(txid, encoded);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a transaction identified by its txid hash with just id
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="txid">transaction Id</param>
        /// <param name="encoded"></param>
        /// <returns>Task of ApiResponse (Transaction)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Transaction>> TransactionAsyncWithHttpInfo(string txid,
            bool encoded = false)
        {
            // verify the required parameter 'txid' is set
            if (txid == null)
                throw new ApiException(400, "Missing required parameter 'txid' when calling DefaultApi->Transaction");

            var localVarPath = "/api/v1/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "txid", txid)); // query parameter
            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "encoded", encoded)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Transaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Transaction>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Transaction) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Transaction)));
        }

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <param name="noBroadcast">Disable the network broadcast (optional)</param>
        /// <returns>string</returns>
        public string TransactionInject(string rawtx, bool? noBroadcast = null)
        {
            ApiResponse<string> localVarResponse = TransactionInjectWithHttpInfo(rawtx, noBroadcast);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <param name="noBroadcast">Disable the network broadcast (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> TransactionInjectWithHttpInfo(string rawtx, bool? noBroadcast = null)
        {
            // verify the required parameter 'rawtx' is set
            if (rawtx == "")
                throw new ApiException(400,
                    "Missing required parameter 'rawtx' when calling DefaultApi->TransactionInject");


            var localVarPath = "/api/v1/injectTransaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "text/plain",
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPostBody = JsonConvert.SerializeObject(new {rawtx = rawtx, no_broadcast = noBroadcast});

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionInject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <param name="noBroadcast">Disable the network broadcast (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> TransactionInjectAsync(string rawtx, bool? noBroadcast = null)
        {
            ApiResponse<string> localVarResponse = await TransactionInjectAsyncWithHttpInfo(rawtx, noBroadcast);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Broadcast a hex-encoded, serialized transaction to the network. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rawtx">hex-encoded serialized transaction string.</param>
        /// <param name="noBroadcast">Disable the network broadcast (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> TransactionInjectAsyncWithHttpInfo(string rawtx,
            bool? noBroadcast = null)
        {
            // verify the required parameter 'rawtx' is set
            if (rawtx == null)
                throw new ApiException(400,
                    "Missing required parameter 'rawtx' when calling DefaultApi->TransactionInject");

            var localVarPath = "/api/v1/injectTransaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "text/plain",
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (rawtx != null)
                localVarHeaderParams.Add("rawtx",
                    this.Configuration.ApiClient.ParameterToString(rawtx)); // header parameter
            if (noBroadcast != null)
                localVarHeaderParams.Add("no_broadcast",
                    this.Configuration.ApiClient.ParameterToString(noBroadcast)); // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionInject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionV2ParamsAddress"> (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 TransactionPost(TransactionV2ParamsAddress transactionV2ParamsAddress = null)
        {
            ApiResponse<InlineResponse2008> localVarResponse = TransactionPostWithHttpInfo(transactionV2ParamsAddress);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a unsigned transaction.
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionV2ParamsAddress"> (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse<InlineResponse2008> TransactionPostWithHttpInfo(
            TransactionV2ParamsAddress transactionV2ParamsAddress = null)
        {
            var localVarPath = "/api/v2/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
                "application/json"
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionV2ParamsAddress != null && transactionV2ParamsAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    this.Configuration.ApiClient.Serialize(transactionV2ParamsAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionV2ParamsAddress; // byte array
            }

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2008)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionV2ParamsAddress"> (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> TransactionPostAsync(
            TransactionV2ParamsAddress transactionV2ParamsAddress = null)
        {
            ApiResponse<InlineResponse2008> localVarResponse =
                await TransactionPostAsyncWithHttpInfo(transactionV2ParamsAddress);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionV2ParamsAddress"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> TransactionPostAsyncWithHttpInfo(
            TransactionV2ParamsAddress transactionV2ParamsAddress = null)
        {
            var localVarPath = "/api/v2/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
                "application/json"
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionV2ParamsAddress != null && transactionV2ParamsAddress.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    this.Configuration.ApiClient.Serialize(transactionV2ParamsAddress); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionV2ParamsAddress; // byte array
            }

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2008)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionV2ParamsUnspent">Unspent parameters</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 TransactionPostUnspent(TransactionV2ParamsUnspent transactionV2ParamsUnspent)
        {
            ApiResponse<InlineResponse2008> localVarResponse =
                TransactionPostUnspentWithHttpInfo(transactionV2ParamsUnspent);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionV2ParamsUnspent">Unspent parameters</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public ApiResponse<InlineResponse2008> TransactionPostUnspentWithHttpInfo(
            TransactionV2ParamsUnspent transactionV2ParamsUnspent)
        {
            // verify the required parameter 'transactionV2ParamsUnspent' is set
            if (transactionV2ParamsUnspent == null)
                throw new ApiException(400,
                    "Missing required parameter 'transactionV2ParamsUnspent' when calling DefaultApi->TransactionPostUnspent");

            var localVarPath = "/api/v2/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
                "application/json"
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionV2ParamsUnspent != null && transactionV2ParamsUnspent.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    this.Configuration.ApiClient.Serialize(transactionV2ParamsUnspent); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionV2ParamsUnspent; // byte array
            }

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionPostUnspent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2008)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionV2ParamsUnspent">Unspent parameters</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> TransactionPostUnspentAsync(
            TransactionV2ParamsUnspent transactionV2ParamsUnspent)
        {
            ApiResponse<InlineResponse2008> localVarResponse =
                await TransactionPostUnspentAsyncWithHttpInfo(transactionV2ParamsUnspent);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionV2ParamsUnspent">Unspent parameters</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>>
            TransactionPostUnspentAsyncWithHttpInfo(TransactionV2ParamsUnspent transactionV2ParamsUnspent)
        {
            // verify the required parameter 'transactionV2ParamsUnspent' is set
            if (transactionV2ParamsUnspent == null)
                throw new ApiException(400,
                    "Missing required parameter 'transactionV2ParamsUnspent' when calling DefaultApi->TransactionPostUnspent");

            var localVarPath = "/api/v2/transaction/unspent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
                "application/json"
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (transactionV2ParamsUnspent != null && transactionV2ParamsUnspent.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    this.Configuration.ApiClient.Serialize(transactionV2ParamsUnspent); // http body (model) parameter
            }
            else
            {
                localVarPostBody = transactionV2ParamsUnspent; // byte array
            }

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionPostUnspent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2008)));
        }

        /// <summary>
        ///  Decode and verify an encoded transaction
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encodedtransaction"></param>
        /// <param name="unsigned"></param>
        /// <returns>Object</returns>
        public object TransactionVerify(string encodedtransaction, bool unsigned = false)
        {
            ApiResponse<Object> localVarResponse = TransactionVerifyWithHttpInfo(encodedtransaction, unsigned);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Decode and verify an encoded transaction
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encodedtransaction"></param>
        /// <param name="unsigned"></param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> TransactionVerifyWithHttpInfo(string encodedtransaction, bool unsigned = false)
        {
            // verify the required parameter 'encodedtransaction' is set
            if (encodedtransaction == null)
                throw new ApiException(400,
                    "Missing required parameter 'encodedtransaction' when calling DefaultApi->TransactionVerify");

            var localVarPath = "/api/v2/transaction/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
                "application/json"
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPostBody =
                Configuration.ApiClient.Serialize(
                    new
                    {
                        unsigned = unsigned,
                        encoded_transaction = encodedtransaction
                    }); // http body (model) parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionVerify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Decode and verify an encoded transaction
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encodedtransaction"></param>
        /// <param name="unsigned"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<object> TransactionVerifyAsync(
            string encodedtransaction, bool unsigned = false)
        {
            ApiResponse<object> localVarResponse =
                await TransactionVerifyAsyncWithHttpInfo(encodedtransaction, unsigned);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Decode and verify an encoded transaction
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="encodedtransaction"></param>
        /// <param name="unsigned"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> TransactionVerifyAsyncWithHttpInfo(
            string encodedtransaction, bool unsigned = false)
        {
            // verify the required parameter 'encodedtransaction' is set
            if (encodedtransaction == null)
                throw new ApiException(400,
                    "Missing required parameter 'encodedtransaction' when calling DefaultApi->TransactionVerify");

            var localVarPath = "/api/v2/transaction/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
                "application/json"
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPostBody =
                Configuration.ApiClient.Serialize(
                    new
                    {
                        unsigned = unsigned,
                        encoded_transaction = encodedtransaction
                    }); // http body (model) parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionVerify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>List<Transaction></returns>
        public List<Transaction> TransactionsGet(string addrs = null, string confirmed = null)
        {
            ApiResponse<List<Transaction>> localVarResponse = TransactionsGetWithHttpInfo(addrs, confirmed);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>ApiResponse of List<Transaction></returns>
        public ApiResponse<List<Transaction>> TransactionsGetWithHttpInfo(string addrs = null, string confirmed = null)
        {
            var localVarPath = "/api/v1/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter
            if (confirmed != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "confirmed",
                        confirmed)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Transaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Transaction>) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(List<Transaction>)));
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Task of List<Transaction></returns>
        public async System.Threading.Tasks.Task<List<Transaction>> TransactionsGetAsync(string addrs = null,
            string confirmed = null)
        {
            ApiResponse<List<Transaction>> localVarResponse = await TransactionsGetAsyncWithHttpInfo(addrs, confirmed);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Task of ApiResponse (List<Transaction>)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Transaction>>> TransactionsGetAsyncWithHttpInfo(
            string addrs = null, string confirmed = null)
        {
            var localVarPath = "/api/v1/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs)); // query parameter
            if (confirmed != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "confirmed",
                        confirmed)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Transaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Transaction>) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(List<Transaction>)));
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>List<Transaction></returns>
        public List<Transaction> TransactionsPost(string addrs = null, string confirmed = null)
        {
            ApiResponse<List<Transaction>> localVarResponse = TransactionsPostWithHttpInfo(addrs, confirmed);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>ApiResponse of List<Transaction></returns>
        public ApiResponse<List<Transaction>> TransactionsPostWithHttpInfo(string addrs = null, string confirmed = null)
        {
            var localVarPath = "/api/v1/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs));
            } // query parameter

            if (confirmed != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "confirmed",
                        confirmed)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Transaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Transaction>) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(List<Transaction>)));
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<List<Transaction>> TransactionsPostAsync(string addrs = null,
            string confirmed = null)
        {
            ApiResponse<List<Transaction>> localVarResponse = await TransactionsPostAsyncWithHttpInfo(addrs, confirmed);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns transactions that match the filters. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addrs">command separated list of addresses (optional)</param>
        /// <param name="confirmed">Whether the transactions should be confirmed [optional, must be 0 or 1; if not provided, returns all] (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Transaction>>> TransactionsPostAsyncWithHttpInfo(
            string addrs = null, string confirmed = null)
        {
            var localVarPath = "/api/v1/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (addrs != null)
            {
                localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "addrs", addrs));
            } // query parameter

            if (confirmed != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "confirmed",
                        confirmed)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Transaction>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Transaction>) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(List<Transaction>)));
        }

        /// <summary>
        /// Returns an unspent output by ID. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>Object</returns>
        public Object Uxout(string uxid = null)
        {
            ApiResponse<Object> localVarResponse = UxoutWithHttpInfo(uxid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an unspent output by ID. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> UxoutWithHttpInfo(string uxid = null)
        {
            var localVarPath = "/api/v1/uxout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uxid != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uxid", uxid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Uxout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Returns an unspent output by ID. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UxoutAsync(string uxid = null)
        {
            ApiResponse<Object> localVarResponse = await UxoutAsyncWithHttpInfo(uxid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns an unspent output by ID. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uxid">uxid to filter by (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UxoutAsyncWithHttpInfo(string uxid = null)
        {
            var localVarPath = "/api/v1/uxout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uxid != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "uxid", uxid)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Uxout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Verifies a Skycoin address. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>Object</returns>
        public Object VerifyAddress(Address address)
        {
            ApiResponse<Object> localVarResponse = VerifyAddressWithHttpInfo(address);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verifies a Skycoin address. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> VerifyAddressWithHttpInfo(Address address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400,
                    "Missing required parameter 'address' when calling DefaultApi->VerifyAddress");

            var localVarPath = "/api/v2/address/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPostBody = address.ToJson();

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Verifies a Skycoin address. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> VerifyAddressAsync(Address address)
        {
            ApiResponse<Object> localVarResponse = await VerifyAddressAsyncWithHttpInfo(address);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verifies a Skycoin address. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Address id.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> VerifyAddressAsyncWithHttpInfo(Address address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400,
                    "Missing required parameter 'address' when calling DefaultApi->VerifyAddress");

            var localVarPath = "/api/v2/address/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPostBody = JsonConvert.SerializeObject(new
            {
                address = address
            });

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("VerifyAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  versionHandler returns the application version info
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 Version()
        {
            ApiResponse<InlineResponse2005> localVarResponse = VersionWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  versionHandler returns the application version info
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public ApiResponse<InlineResponse2005> VersionWithHttpInfo()
        {
            var localVarPath = "/api/v1/version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Version", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2005)));
        }

        /// <summary>
        ///  versionHandler returns the application version info
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> VersionAsync()
        {
            ApiResponse<InlineResponse2005> localVarResponse = await VersionAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  versionHandler returns the application version info
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> VersionAsyncWithHttpInfo()
        {
            var localVarPath = "/api/v1/version";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Version", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2005>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2005) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2005)));
        }

        /// <summary>
        /// Returns a wallet by id. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Object</returns>
        public Wallet Wallet(string id)
        {
            ApiResponse<Wallet> localVarResponse = WalletWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a wallet by id. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Wallet> WalletWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->Wallet");

            var localVarPath = "/api/v1/wallet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Wallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

        /// <summary>
        /// Returns a wallet by id. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Wallet> WalletAsync(string id)
        {
            ApiResponse<Wallet> localVarResponse = await WalletAsyncWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns a wallet by id. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Wallet>> WalletAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->Wallet");

            var localVarPath = "/api/v1/wallet";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Wallet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Balance</returns>
        public Balance WalletBalance(string id)
        {
            ApiResponse<Balance> localVarResponse = WalletBalanceWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Balance> WalletBalanceWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletBalance");

            var localVarPath = "/api/v1/wallet/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Balance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Balance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Balance)));
        }

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of Balance</returns>
        public async System.Threading.Tasks.Task<Balance> WalletBalanceAsync(string id)
        {
            ApiResponse<Balance> localVarResponse = await WalletBalanceAsyncWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the wallet&#39;s balance, both confirmed and predicted.  The predicted balance is the confirmed balance minus the pending spends. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">tags to filter by</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Balance>> WalletBalanceAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletBalance");

            var localVarPath = "/api/v1/wallet/balance";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletBalance", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Balance>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Balance) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Balance)));
        }

        /// <summary>
        ///  Create a wallet
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">wallet seed passphrase [optional, bip44 type wallet only]</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="seedPassphrase">wallet seed passphrase [optional, bip44 type wallet only] (optional)</param>
        /// <param name="bip44Coin">BIP44 coin type [optional, defaults to 8000 (skycoin&#39;s coin type), only valid if type is \&quot;bip44\&quot;] (optional)</param>
        /// <param name="xpub">xpub key [required for xpub wallets] (optional)</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Wallet</returns>
        public Wallet WalletCreate(string type, string label, string seed = null, string seedPassphrase = null,
            string bip44Coin = null, string xpub = null, int? scan = null, bool? encrypt = null,
            string password = null)
        {
            ApiResponse<Wallet> localVarResponse = WalletCreateWithHttpInfo(type, label, seed, seedPassphrase,
                bip44Coin, xpub, scan, encrypt, password);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a wallet
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">wallet seed passphrase [optional, bip44 type wallet only]</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="seedPassphrase">wallet seed passphrase [optional, bip44 type wallet only] (optional)</param>
        /// <param name="bip44Coin">BIP44 coin type [optional, defaults to 8000 (skycoin&#39;s coin type), only valid if type is \&quot;bip44\&quot;] (optional)</param>
        /// <param name="xpub">xpub key [required for xpub wallets] (optional)</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>ApiResponse of Wallet</returns>
        public ApiResponse<Wallet> WalletCreateWithHttpInfo(string type, string label, string seed = null,
            string seedPassphrase = null,
            string bip44Coin = null, string xpub = null, int? scan = null, bool? encrypt = null,
            string password = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->WalletCreate");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling DefaultApi->WalletCreate");

            var localVarPath = "/api/v1/wallet/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (seed != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "seed", seed)); // query parameter
            if (scan != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "scan", scan)); // query parameter
            if (encrypt != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "encrypt", encrypt)); // query parameter
            if (password != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (bip44Coin != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "bip44-coin", bip44Coin)); // query parameter
            if (xpub != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "xpub", xpub)); // query parameter
            if (seedPassphrase != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "seed-passphrase",
                        seedPassphrase)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

        /// <summary>
        ///  Create a wallet
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">wallet seed passphrase [optional, bip44 type wallet only]</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="seedPassphrase">wallet seed passphrase [optional, bip44 type wallet only] (optional)</param>
        /// <param name="bip44Coin">BIP44 coin type [optional, defaults to 8000 (skycoin&#39;s coin type), only valid if type is \&quot;bip44\&quot;] (optional)</param>
        /// <param name="xpub">xpub key [required for xpub wallets] (optional)</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of Wallet</returns>
        public async System.Threading.Tasks.Task<Wallet> WalletCreateAsync(string type, string label,
            string seed = null, string seedPassphrase = null,
            string bip44Coin = null, string xpub = null, int? scan = null, bool? encrypt = null,
            string password = null)
        {
            ApiResponse<Wallet> localVarResponse =
                await WalletCreateAsyncWithHttpInfo(type, seed, label, seedPassphrase, bip44Coin, xpub, scan, encrypt,
                    password);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a wallet
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">wallet seed passphrase [optional, bip44 type wallet only]</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="label">Wallet label.</param>
        /// <param name="seedPassphrase">wallet seed passphrase [optional, bip44 type wallet only] (optional)</param>
        /// <param name="bip44Coin">BIP44 coin type [optional, defaults to 8000 (skycoin&#39;s coin type), only valid if type is \&quot;bip44\&quot;] (optional)</param>
        /// <param name="xpub">xpub key [required for xpub wallets] (optional)</param>
        /// <param name="scan">The number of addresses to scan ahead for balances. (optional)</param>
        /// <param name="encrypt">Encrypt wallet. (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Wallet>> WalletCreateAsyncWithHttpInfo(string type,
            string label, string seed = null, string seedPassphrase = null,
            string bip44Coin = null, string xpub = null, int? scan = null, bool? encrypt = null,
            string password = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling DefaultApi->WalletCreate");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling DefaultApi->WalletCreate");

            var localVarPath = "/api/v1/wallet/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); // query parameter
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (seed != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "seed", seed)); // query parameter
            if (scan != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "scan", scan)); // query parameter
            if (encrypt != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "encrypt", encrypt)); // query parameter
            if (password != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (bip44Coin != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "bip44-coin", bip44Coin)); // query parameter
            if (xpub != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "xpub", xpub)); // query parameter
            if (seedPassphrase != null)
                localVarQueryParams.AddRange(
                    Configuration.ApiClient.ParameterToKeyValuePairs("", "seed-passphase",
                        seedPassphrase)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

        /// <summary>
        /// Decrypts wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Wallet</returns>
        public Wallet WalletDecrypt(string id, string password)
        {
            ApiResponse<Wallet> localVarResponse = WalletDecryptWithHttpInfo(id, password);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Decrypts wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of Wallet</returns>
        public ApiResponse<Wallet> WalletDecryptWithHttpInfo(string id, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletDecrypt");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400,
                    "Missing required parameter 'password' when calling DefaultApi->WalletDecrypt");

            var localVarPath = "/api/v1/wallet/decrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletDecrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

        /// <summary>
        /// Decrypts wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of Wallet</returns>
        public async System.Threading.Tasks.Task<Wallet> WalletDecryptAsync(string id, string password)
        {
            ApiResponse<Wallet> localVarResponse = await WalletDecryptAsyncWithHttpInfo(id, password);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Decrypts wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Wallet>> WalletDecryptAsyncWithHttpInfo(string id,
            string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletDecrypt");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400,
                    "Missing required parameter 'password' when calling DefaultApi->WalletDecrypt");

            var localVarPath = "/api/v1/wallet/decrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter


            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletDecrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

        /// <summary>
        /// Encrypt wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Wallet</returns>
        public Wallet WalletEncrypt(string id, string password)
        {
            ApiResponse<Wallet> localVarResponse = WalletEncryptWithHttpInfo(id, password);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Encrypt wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of Wallet</returns>
        public ApiResponse<Wallet> WalletEncryptWithHttpInfo(string id, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletEncrypt");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400,
                    "Missing required parameter 'password' when calling DefaultApi->WalletEncrypt");

            var localVarPath = "/api/v1/wallet/encrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletEncrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

        /// <summary>
        /// Encrypt wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of Wallet</returns>
        public async System.Threading.Tasks.Task<Wallet> WalletEncryptAsync(string id, string password)
        {
            ApiResponse<Wallet> localVarResponse = await WalletEncryptAsyncWithHttpInfo(id, password);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Encrypt wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (Wallet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Wallet>> WalletEncryptAsyncWithHttpInfo(string id,
            string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletEncrypt");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400,
                    "Missing required parameter 'password' when calling DefaultApi->WalletEncrypt");

            var localVarPath = "/api/v1/wallet/encrypt";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletEncrypt", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Wallet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Wallet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Wallet)));
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 WalletFolder()
        {
            ApiResponse<InlineResponse2007> localVarResponse = WalletFolderWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public ApiResponse<InlineResponse2007> WalletFolderWithHttpInfo()
        {
            // verify the required parameter 'addr' is set
            var localVarPath = "/api/v1/wallets/folderName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2007)));
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> WalletFolderAsync()
        {
            ApiResponse<InlineResponse2007> localVarResponse = await WalletFolderAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> WalletFolderAsyncWithHttpInfo()
        {
            // verify the required parameter 'addr' is set
            var localVarPath = "/api/v1/wallets/folderName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletFolder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2007>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2007) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2007)));
        }

        /// <summary>
        ///  Generates new addresses
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Object</returns>
        public Object WalletNewAddress(string id, int num = 1, string password = null)
        {
            ApiResponse<Object> localVarResponse = WalletNewAddressWithHttpInfo(id, num, password);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Generates new addresses
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> WalletNewAddressWithHttpInfo(string id, int num = 1, string password = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling DefaultApi->WalletNewAddress");

            var localVarPath = "/api/v1/wallet/newAddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (num != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "num", num)); // query parameter
            if (password != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletNewAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Generates new addresses
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletNewAddressAsync(string id, int num = 0,
            string password = null)
        {
            ApiResponse<Object> localVarResponse = await WalletNewAddressAsyncWithHttpInfo(id, num, password);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Generates new addresses
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id</param>
        /// <param name="num">The number you want to generate (optional)</param>
        /// <param name="password">Wallet Password (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletNewAddressAsyncWithHttpInfo(string id,
            int num = 0, string password = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling DefaultApi->WalletNewAddress");

            var localVarPath = "/api/v1/wallet/newAddress";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (num != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "num", num)); // query parameter
            if (password != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletNewAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>Object</returns>
        public Object WalletNewSeed(string entropy = null)
        {
            ApiResponse<Object> localVarResponse = WalletNewSeedWithHttpInfo(entropy);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> WalletNewSeedWithHttpInfo(string entropy = null)
        {
            var localVarPath = "/api/v1/wallet/newSeed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entropy != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entropy", entropy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletNewSeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletNewSeedAsync(string entropy = null)
        {
            ApiResponse<Object> localVarResponse = await WalletNewSeedAsyncWithHttpInfo(entropy);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the wallet directory path
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entropy">Entropy bitSize. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletNewSeedAsyncWithHttpInfo(
            string entropy = null)
        {
            var localVarPath = "/api/v1/wallet/newSeed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (entropy != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "entropy", entropy)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletNewSeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned. Recovers an encrypted wallet by providing the wallet seed and optional seed passphrase
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="seedPassphrase">Wallet seed-passphrase. (optional)</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>Object</returns>
        public Object WalletRecover(string id, string seed, string seedPassphrase = null, string password = null)
        {
            ApiResponse<Object> localVarResponse = WalletRecoverWithHttpInfo(id, seed, seedPassphrase, password);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned. Recovers an encrypted wallet by providing the wallet seed and optional seed passphrase
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="seedPassphrase">Wallet seed-passphrase. (optional)</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> WalletRecoverWithHttpInfo(string id, string seed, string seedPassphrase = null,
            string password = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletRecover");
            // verify the required parameter 'seed' is set
            if (seed == null)
                throw new ApiException(400, "Missing required parameter 'seed' when calling DefaultApi->WalletRecover");

            var localVarPath = "/api/v2/wallet/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPostBody = JsonConvert.SerializeObject(new
            {
                id = id,
                seed = seed,
                seed_passphrase = seedPassphrase,
                password = password
            });

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletRecover", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned. Recovers an encrypted wallet by providing the wallet seed and optional seed passphrase
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="seedPassphrase">Wallet seed-passphrase. (optional)</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletRecoverAsync(string id, string seed,
            string seedPassphrase = null, string password = null)
        {
            ApiResponse<Object> localVarResponse =
                await WalletRecoverAsyncWithHttpInfo(id, seed, seedPassphrase, password);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Recovers an encrypted wallet by providing the seed. The first address will be generated from seed and compared to the first address of the specified wallet. If they match, the wallet will be regenerated with an optional password. If the wallet is not encrypted, an error is returned. Recovers an encrypted wallet by providing the wallet seed and optional seed passphrase
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet id.</param>
        /// <param name="seed">Wallet seed.</param>
        /// <param name="seedPassphrase">Wallet seed-passphrase. (optional)</param>
        /// <param name="password">Wallet password. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletRecoverAsyncWithHttpInfo(string id,
            string seed, string seedPassphrase = null, string password = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletRecover");
            // verify the required parameter 'seed' is set
            if (seed == null)
                throw new ApiException(400, "Missing required parameter 'seed' when calling DefaultApi->WalletRecover");

            var localVarPath = "/api/v2/wallet/recover";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPostBody = JsonConvert.SerializeObject(new
            {
                id = id,
                seed = seed,
                seed_passphrase = seedPassphrase,
                password = password
            });

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletRecover", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Object</returns>
        public Object WalletSeed(string id, string password)
        {
            ApiResponse<Object> localVarResponse = WalletSeedWithHttpInfo(id, password);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> WalletSeedWithHttpInfo(string id, string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletSeed");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400,
                    "Missing required parameter 'password' when calling DefaultApi->WalletSeed");

            var localVarPath = "/api/v1/wallet/seed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletSeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletSeedAsync(string id, string password)
        {
            ApiResponse<Object> localVarResponse = await WalletSeedAsyncWithHttpInfo(id, password);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint only works for encrypted wallets. If the wallet is unencrypted, The seed will be not returned. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="password">Wallet password.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletSeedAsyncWithHttpInfo(string id,
            string password)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletSeed");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400,
                    "Missing required parameter 'password' when calling DefaultApi->WalletSeed");

            var localVarPath = "/api/v1/wallet/seed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (password != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletSeed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Verifies a wallet seed. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Seed to be verified. (optional)</param>
        /// <returns>Object</returns>
        public Object WalletSeedVerify(string seed = null)
        {
            ApiResponse<Object> localVarResponse = WalletSeedVerifyWithHttpInfo(seed);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verifies a wallet seed. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Seed to be verified. (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse<Object> WalletSeedVerifyWithHttpInfo(string seed = null)
        {
            var localVarPath = "/api/v2/wallet/seed/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (seed != null)
            {
                localVarPostBody =
                    Configuration.ApiClient.Serialize(new Dictionary<string, string> {{"seed", seed}});
            }
            // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletSeedVerify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Verifies a wallet seed. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Seed to be verified. (optional)</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> WalletSeedVerifyAsync(string seed = null)
        {
            ApiResponse<Object> localVarResponse = await WalletSeedVerifyAsyncWithHttpInfo(seed);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Verifies a wallet seed. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="seed">Seed to be verified. (optional)</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletSeedVerifyAsyncWithHttpInfo(
            string seed = null)
        {
            var localVarPath = "/api/v2/wallet/seed/verify";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (seed != null)
            {
                localVarPostBody =
                    this.Configuration.ApiClient.Serialize(new Dictionary<string, string> {{"seed", seed}});
            } // header parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletSeedVerify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Creates a signed transaction 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionRequest"></param>
        /// <returns>InlineResponse2008Data</returns>
        public InlineResponse2008Data WalletTransaction(WalletTransactionRequest walletTransactionRequest)
        {
            ApiResponse<InlineResponse2008Data> localVarResponse =
                WalletTransactionWithHttpInfo(walletTransactionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a signed transaction 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionRequest"></param>
        /// <returns>ApiResponse of InlineResponse2008Data</returns>
        public ApiResponse<InlineResponse2008Data> WalletTransactionWithHttpInfo(
            WalletTransactionRequest walletTransactionRequest)
        {
            // verify the required parameter 'walletTransactionRequest' is set
            if (walletTransactionRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'walletTransactionRequest' when calling DefaultApi->WalletTransaction");

            var localVarPath = "/api/v1/wallet/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
                "application/json"
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletTransactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    this.Configuration.ApiClient.Serialize(walletTransactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = walletTransactionRequest; // byte array
            }

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008Data>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008Data) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2008Data)));
        }

        /// <summary>
        /// Creates a signed transaction 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionRequest"></param>
        /// <returns>Task of InlineResponse2008Data</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008Data> WalletTransactionAsync(
            WalletTransactionRequest walletTransactionRequest)
        {
            ApiResponse<InlineResponse2008Data> localVarResponse =
                await WalletTransactionAsyncWithHttpInfo(walletTransactionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a signed transaction 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionRequest"></param>
        /// <returns>Task of ApiResponse (InlineResponse2008Data)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2008Data>>
            WalletTransactionAsyncWithHttpInfo(
                WalletTransactionRequest walletTransactionRequest)
        {
            // verify the required parameter 'walletTransactionRequest' is set
            if (walletTransactionRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'walletTransactionRequest' when calling DefaultApi->WalletTransaction");

            var localVarPath = "/api/v1/wallet/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
                "application/json"
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletTransactionRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    this.Configuration.ApiClient.Serialize(walletTransactionRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = walletTransactionRequest; // byte array
            }

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletTransaction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2008Data>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2008Data) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2008Data)));
        }

        /// <summary>
        /// Creates a signed transaction 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionSignRequest"></param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 WalletTransactionSign(WalletTransactionSignRequest walletTransactionSignRequest)
        {
            ApiResponse<InlineResponse2009> localVarResponse =
                WalletTransactionSignWithHttpInfo(walletTransactionSignRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a signed transaction 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionSignRequest"></param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse<InlineResponse2009> WalletTransactionSignWithHttpInfo(
            WalletTransactionSignRequest walletTransactionSignRequest)
        {
            // verify the required parameter 'walletTransactionSignRequest' is set
            if (walletTransactionSignRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'walletTransactionSignRequest' when calling DefaultApi->WalletTransactionSign");

            var localVarPath = "/api/v2/wallet/transaction/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
                "application/json"
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletTransactionSignRequest != null && walletTransactionSignRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    this.Configuration.ApiClient.Serialize(walletTransactionSignRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = walletTransactionSignRequest; // byte array
            }

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletTransactionSign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2009)));
        }

        /// <summary>
        /// Creates a signed transaction 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionSignRequest"></param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> WalletTransactionSignAsync(
            WalletTransactionSignRequest walletTransactionSignRequest)
        {
            ApiResponse<InlineResponse2009> localVarResponse =
                await WalletTransactionSignAsyncWithHttpInfo(walletTransactionSignRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a signed transaction 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="walletTransactionSignRequest"></param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>>
            WalletTransactionSignAsyncWithHttpInfo(WalletTransactionSignRequest walletTransactionSignRequest)
        {
            // verify the required parameter 'walletTransactionSignRequest' is set
            if (walletTransactionSignRequest == null)
                throw new ApiException(400,
                    "Missing required parameter 'walletTransactionSignRequest' when calling DefaultApi->WalletTransactionSign");

            var localVarPath = "/api/v2/wallet/transaction/sign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
                "application/json"
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (walletTransactionSignRequest != null && walletTransactionSignRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody =
                    this.Configuration.ApiClient.Serialize(walletTransactionSignRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = walletTransactionSignRequest; // byte array
            }

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletTransactionSign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2009>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2009) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2009)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 WalletTransactions(string id)
        {
            ApiResponse<InlineResponse2006> localVarResponse = WalletTransactionsWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public ApiResponse<InlineResponse2006> WalletTransactionsWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling DefaultApi->WalletTransactions");

            var localVarPath = "/api/v1/wallet/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2006)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> WalletTransactionsAsync(string id)
        {
            ApiResponse<InlineResponse2006> localVarResponse = await WalletTransactionsAsyncWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>>
            WalletTransactionsAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400,
                    "Missing required parameter 'id' when calling DefaultApi->WalletTransactions");

            var localVarPath = "/api/v1/wallet/transactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletTransactions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2006>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2006) this.Configuration.ApiClient.Deserialize(localVarResponse,
                    typeof(InlineResponse2006)));
        }

        /// <summary>
        /// Unloads wallet from the wallet service. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns></returns>
        public void WalletUnload(string id)
        {
            WalletUnloadWithHttpInfo(id);
        }

        /// <summary>
        /// Unloads wallet from the wallet service. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> WalletUnloadWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletUnload");

            var localVarPath = "/api/v1/wallet/unload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "x-www-form-urlencoded"
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletUnload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unloads wallet from the wallet service. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task WalletUnloadAsync(string id)
        {
            await WalletUnloadAsyncWithHttpInfo(id);
        }

        /// <summary>
        /// Unloads wallet from the wallet service. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> WalletUnloadAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletUnload");

            var localVarPath = "/api/v1/wallet/unload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null)
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletUnload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Update the wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>string</returns>
        public string WalletUpdate(string id, string label)
        {
            ApiResponse<string> localVarResponse = WalletUpdateWithHttpInfo(id, label);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> WalletUpdateWithHttpInfo(string id, string label)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletUpdate");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling DefaultApi->WalletUpdate");

            var localVarPath = "/api/v1/wallet/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "text/plain",
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); //query parameters
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); //query parameters

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Update the wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> WalletUpdateAsync(string id, string label)
        {
            ApiResponse<string> localVarResponse = await WalletUpdateAsyncWithHttpInfo(id, label);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the wallet. 
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Wallet Id.</param>
        /// <param name="label">The label the wallet will be updated to.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> WalletUpdateAsyncWithHttpInfo(string id,
            string label)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->WalletUpdate");
            // verify the required parameter 'label' is set
            if (label == null)
                throw new ApiException(400, "Missing required parameter 'label' when calling DefaultApi->WalletUpdate");

            var localVarPath = "/api/v1/wallet/update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "text/plain",
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); //query parameters
            localVarQueryParams.AddRange(
                Configuration.ApiClient.ParameterToKeyValuePairs("", "label", label)); //query parameters

            // authentication (csrfAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN")))
            {
                localVarHeaderParams["X-CSRF-TOKEN"] = this.Configuration.GetApiKeyWithPrefix("X-CSRF-TOKEN");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WalletUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Returns all loaded wallets
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Object&gt;</returns>
        public List<Wallet> Wallets()
        {
            ApiResponse<List<Wallet>> localVarResponse = WalletsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all loaded wallets
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Object&gt;</returns>
        public ApiResponse<List<Wallet>> WalletsWithHttpInfo()
        {
            var localVarPath = "/api/v1/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Wallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Wallet>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Wallet>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Wallet>)));
        }

        /// <summary>
        ///  Returns all loaded wallets
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Object&gt;</returns>
        public async System.Threading.Tasks.Task<List<Wallet>> WalletsAsync()
        {
            ApiResponse<List<Wallet>> localVarResponse = await WalletsAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns all loaded wallets
        /// </summary>
        /// <exception cref="Skyapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Object&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Wallet>>> WalletsAsyncWithHttpInfo()
        {
            var localVarPath = "/api/v1/wallets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[]
            {
            };
            String localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[]
            {
                "application/json",
                "application/xml",
            };
            String localVarHttpHeaderAccept =
                this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Wallets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Wallet>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<Wallet>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Wallet>)));
        }
    }
}