/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * The version of the OpenAPI document: 0.26.0
 * Contact: contact@skycoin.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */
using System;
using NUnit.Framework;
using Skyapi.Api;
using Skyapi.Client;
using System.IO;
using System.Text;
using Newtonsoft.Json;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text.RegularExpressions;
using Skyapi.Model;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;
using Newtonsoft.Json;
using NUnit.Framework;
using Skyapi.Client;
using Skyapi.Api;
using Skyapi.Model;

namespace Skyapi.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private string testMode = Environment.GetEnvironmentVariable("TESTMODE") ?? "stable";
        private string coin = Environment.GetEnvironmentVariable("COIN") ?? "skycoin";
        private bool useCsrf = Convert.ToBoolean(Environment.GetEnvironmentVariable("USE_CSRF") ?? "false");
        private string nodeAddress = Environment.GetEnvironmentVariable("SKYCOIN_NODE_HOST") ?? "http://localhost:6420";

        private bool liveDisableNetworking =
            Convert.ToBoolean(Environment.GetEnvironmentVariable("LIVE_DISABLE_NETWORKING") ?? "false");


        private struct Progress
        {
            public int Current { get; set; }
            public int Highest { get; set; }
            public string[] Peer { get; set; }
        }

        private struct Head
        {
            public int Seq { get; set; }
            public string Block_Hash { get; set; }
            public string Previous_Block_Hash { get; set; }
            public long Timestamp { get; set; }
            public long Fee { get; set; }
            public int Version { get; set; }
            public string Tx_Body_Hash { get; set; }
            public string Ux_Hash { get; set; }
        }

        private struct BlockchainMetadata
        {
            public Head Head { get; set; }
            public int Unspents { get; set; }
            public int Unconfirmed { get; set; }
            public string Time_Since_Last_Block { get; set; }
        }

        private struct Health
        {
            public BlockchainMetadata Blockchain { get; set; }
            public InlineResponse2005 Version { get; set; }
            public string Coin { get; set; }
            public string User_Agent { get; set; }
            public int Open_Connections { get; set; }
            public int Outgoing_Connections { get; set; }
            public int Incoming_Connections { get; set; }
            public string Uptime { get; set; }
            public bool CSRF_Enabled { get; set; }
            public bool Header_Check_Enabled { get; set; }
            public bool Csp_Enabled { get; set; }
            public bool Wallet_API_Enabled { get; set; }
            public bool GUI_Enabled { get; set; }
            public object User_Verify_Transaction { get; set; }
            public object Unconfirmed_Verify_Transaction { get; set; }
            public long Started_At { get; set; }
        }

        private struct Balance
        {
            public Dictionary<string, BalancePair> Addresses { get; set; }
            public Confirm Confirmed { get; set; }
            public Predict Predicted { get; set; }
        }

        private struct BalancePair
        {
            public Confirm Confirmed { get; set; }
            public Predict Predicted { get; set; }
        }

        private struct Confirm
        {
            public long coins { get; set; }
            public long hours { get; set; }
        }

        private struct Predict
        {
            public long coins { get; set; }
            public long hours { get; set; }
        }

        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }


        /// <summary>
        /// Test AddressCount
        /// </summary>
        [Test]
        public void AddressCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.AddressCount();
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }

        /// <summary>
        /// Test AddressUxouts
        /// </summary>
        [Test]
        public void AddressUxoutsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //var response = instance.AddressUxouts(address);
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }

        /// <summary>
        /// Test ApiV1RawtxGet
        /// </summary>
        [Test]
        public void ApiV1RawtxGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiV1RawtxGet();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }

        /// <summary>
        /// Test ApiV2MetricsGet
        /// </summary>
        [Test]
        public void ApiV2MetricsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ApiV2MetricsGet();
            //Assert.IsInstanceOf<string> (response, "response is string");
        }

        /// <summary>
        /// Test BalanceGet
        /// </summary>
        [Test]
        public void BalanceGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string addrs = null;
            //var response = instance.BalanceGet(addrs);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test BalancePost
        /// </summary>
        [Test]
        public void BalancePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string addrs = null;
            //var response = instance.BalancePost(addrs);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test Block
        /// </summary>
        [Test]
        public void BlockTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string hash = null;
            //int? seq = null;
            //var response = instance.Block(hash, seq);
            //Assert.IsInstanceOf<List<BlockSchema>> (response, "response is List<BlockSchema>");
        }

        /// <summary>
        /// Test BlockchainMetadata
        /// </summary>
        [Test]
        public void BlockchainMetadataTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.BlockchainMetadata();
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test BlockchainProgress
        /// </summary>
        [Test]
        public void BlockchainProgressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.BlockchainProgress();
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test Blocks
        /// </summary>
        [Test]
        public void BlocksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? start = null;
            //int? end = null;
            //List<int?> seq = null;
            //var response = instance.Blocks(start, end, seq);
            //Assert.IsInstanceOf<InlineResponse2001> (response, "response is InlineResponse2001");
        }

        /// <summary>
        /// Test CoinSupply
        /// </summary>
        [Test]
        public void CoinSupplyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CoinSupply();
            //Assert.IsInstanceOf<InlineResponse2002> (response, "response is InlineResponse2002");
        }

        /// <summary>
        /// Test Csrf
        /// </summary>
        [Test]
        public void CsrfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Csrf();
            //Assert.IsInstanceOf<InlineResponse2003> (response, "response is InlineResponse2003");
        }

        /// <summary>
        /// Test DataDELETE
        /// </summary>
        [Test]
        public void DataDELETETest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string key = null;
            //instance.DataDELETE(type, key);
        }

        /// <summary>
        /// Test DataGET
        /// </summary>
        [Test]
        public void DataGETTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string key = null;
            //var response = instance.DataGET(type, key);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test DataPOST
        /// </summary>
        [Test]
        public void DataPOSTTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string type = null;
            //string key = null;
            //string val = null;
            //instance.DataPOST(type, key, val);
        }

        /// <summary>
        /// Test DefaultConnections
        /// </summary>
        [Test]
        public void DefaultConnectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DefaultConnections();
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }

        /// <summary>
        /// Test Health
        /// </summary>
        [Test]
        public void HealthTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Health();
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test LastBlocks
        /// </summary>
        [Test]
        public void LastBlocksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? num = null;
            //var response = instance.LastBlocks(num);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test NetworkConnection
        /// </summary>
        [Test]
        public void NetworkConnectionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string addr = null;
            //var response = instance.NetworkConnection(addr);
            //Assert.IsInstanceOf<NetworkConnectionSchema> (response, "response is NetworkConnectionSchema");
        }

        /// <summary>
        /// Test NetworkConnections
        /// </summary>
        [Test]
        public void NetworkConnectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string states = null;
            //string direction = null;
            //var response = instance.NetworkConnections(states, direction);
            //Assert.IsInstanceOf<InlineResponse2004> (response, "response is InlineResponse2004");
        }

        /// <summary>
        /// Test NetworkConnectionsDisconnect
        /// </summary>
        [Test]
        public void NetworkConnectionsDisconnectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.NetworkConnectionsDisconnect(id);
        }

        /// <summary>
        /// Test NetworkConnectionsExchange
        /// </summary>
        [Test]
        public void NetworkConnectionsExchangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.NetworkConnectionsExchange();
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }

        /// <summary>
        /// Test NetworkConnectionsTrust
        /// </summary>
        [Test]
        public void NetworkConnectionsTrustTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.NetworkConnectionsTrust();
            //Assert.IsInstanceOf<List<string>> (response, "response is List<string>");
        }

        /// <summary>
        /// Test OutputsGet
        /// </summary>
        [Test]
        public void OutputsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> address = null;
            //List<string> hash = null;
            //var response = instance.OutputsGet(address, hash);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test OutputsPost
        /// </summary>
        [Test]
        public void OutputsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string address = null;
            //string hash = null;
            //var response = instance.OutputsPost(address, hash);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test PendingTxs
        /// </summary>
        [Test]
        public void PendingTxsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.PendingTxs();
            //Assert.IsInstanceOf<List<InlineResponse20010>> (response, "response is List<InlineResponse20010>");
        }

        /// <summary>
        /// Test ResendUnconfirmedTxns
        /// </summary>
        [Test]
        public void ResendUnconfirmedTxnsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ResendUnconfirmedTxns();
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test Richlist
        /// </summary>
        [Test]
        public void RichlistTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? includeDistribution = null;
            //string n = null;
            //var response = instance.Richlist(includeDistribution, n);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test Transaction
        /// </summary>
        [Test]
        public void TransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string txid = null;
            //var response = instance.Transaction(txid);
            //Assert.IsInstanceOf<Transaction> (response, "response is Transaction");
        }

        /// <summary>
        /// Test TransactionInject
        /// </summary>
        [Test]
        public void TransactionInjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string rawtx = null;
            //var response = instance.TransactionInject(rawtx);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }

        /// <summary>
        /// Test TransactionPost
        /// </summary>
        [Test]
        public void TransactionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionV2ParamsAddress transactionV2ParamsAddress = null;
            //var response = instance.TransactionPost(transactionV2ParamsAddress);
            //Assert.IsInstanceOf<InlineResponse2008> (response, "response is InlineResponse2008");
        }

        /// <summary>
        /// Test TransactionPostUnspent
        /// </summary>
        [Test]
        public void TransactionPostUnspentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionV2ParamsUnspent transactionV2ParamsUnspent = null;
            //var response = instance.TransactionPostUnspent(transactionV2ParamsUnspent);
            //Assert.IsInstanceOf<InlineResponse2008> (response, "response is InlineResponse2008");
        }

        /// <summary>
        /// Test TransactionRaw
        /// </summary>
        [Test]
        public void TransactionRawTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string txid = null;
            //var response = instance.TransactionRaw(txid);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test TransactionVerify
        /// </summary>
        [Test]
        public void TransactionVerifyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TransactionVerifyRequest transactionVerifyRequest = null;
            //var response = instance.TransactionVerify(transactionVerifyRequest);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test TransactionsGet
        /// </summary>
        [Test]
        public void TransactionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string addrs = null;
            //string confirmed = null;
            //var response = instance.TransactionsGet(addrs, confirmed);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test TransactionsPost
        /// </summary>
        [Test]
        public void TransactionsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string addrs = null;
            //string confirmed = null;
            //var response = instance.TransactionsPost(addrs, confirmed);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test Uxout
        /// </summary>
        [Test]
        public void UxoutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uxid = null;
            //var response = instance.Uxout(uxid);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test VerifyAddress
        /// </summary>
        [Test]
        public void VerifyAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Object address = null;
            //var response = instance.VerifyAddress(address);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test Version
        /// </summary>
        [Test]
        public void VersionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            var response = instance.Version();
            Assert.IsInstanceOf<InlineResponse2005>(response, "response is InlineResponse2005");
            Assert.AreEqual("v0.26.0", response.Branch);
            Assert.AreEqual("ff754084df0912bc0d151529e2893ca86618fb3f", response.Commit);
            Assert.AreEqual("0.26.0", response.Version);
        }

        /// <summary>
        /// Test Wallet
        /// </summary>
        [Test]
        public void WalletTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.Wallet(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test WalletBalance
        /// </summary>
        [Test]
        public void WalletBalanceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.WalletBalance(id);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test WalletCreate
        /// </summary>
        [Test]
        public void WalletCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string seed = null;
            //string label = null;
            //int? scan = null;
            //bool? encrypt = null;
            //string password = null;
            //var response = instance.WalletCreate(seed, label, scan, encrypt, password);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test WalletDecrypt
        /// </summary>
        [Test]
        public void WalletDecryptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string password = null;
            //var response = instance.WalletDecrypt(id, password);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test WalletEncrypt
        /// </summary>
        [Test]
        public void WalletEncryptTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string password = null;
            //var response = instance.WalletEncrypt(id, password);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test WalletFolder
        /// </summary>
        [Test]
        public void WalletFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string addr = null;
            //var response = instance.WalletFolder(addr);
            //Assert.IsInstanceOf<InlineResponse2007> (response, "response is InlineResponse2007");
        }

        /// <summary>
        /// Test WalletNewAddress
        /// </summary>
        [Test]
        public void WalletNewAddressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string num = null;
            //string password = null;
            //var response = instance.WalletNewAddress(id, num, password);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test WalletNewSeed
        /// </summary>
        [Test]
        public void WalletNewSeedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string entropy = null;
            //var response = instance.WalletNewSeed(entropy);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test WalletRecover
        /// </summary>
        [Test]
        public void WalletRecoverTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string seed = null;
            //string password = null;
            //var response = instance.WalletRecover(id, seed, password);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test WalletSeed
        /// </summary>
        [Test]
        public void WalletSeedTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string password = null;
            //var response = instance.WalletSeed(id, password);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        private string GetCsrf()
        {
            string token;
            try
            {
                token = instance.Csrf().CsrfToken;
            }
            catch (Exception)
            {
                return "";
            }

            return token;
        }


        /// <summary>
        /// Test WalletSeedVerify
        /// </summary>
        [Test]
        public void WalletSeedVerifyTest()
        {
            if (useCsrf)
            {
                instance.Configuration.AddApiKeyPrefix("X-CSRF-TOKEN", GetCsrf());
            }

            instance.Configuration.AddDefaultHeader("Content-Type", "application/json");
            //Test with correct seed
            var result =
                instance.WalletSeedVerify(
                    "nut wife logic sample addict shop before tobacco crisp bleak lawsuit affair");
            Assert.IsInstanceOf<Object> (result, "response is Object");
            Assert.NotNull(result);
            //test with incorrect seed
            Assert.Throws<ApiException>(() => instance.WalletSeedVerify("nut"));

        }

        /// <summary>
        /// Test WalletTransaction
        /// </summary>
        [Test]
        public void WalletTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WalletTransactionRequest walletTransactionRequest = null;
            //var response = instance.WalletTransaction(walletTransactionRequest);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }

        /// <summary>
        /// Test WalletTransactionSign
        /// </summary>
        [Test]
        public void WalletTransactionSignTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //WalletTransactionSignRequest walletTransactionSignRequest = null;
            //var response = instance.WalletTransactionSign(walletTransactionSignRequest);
            //Assert.IsInstanceOf<InlineResponse2009> (response, "response is InlineResponse2009");
        }

        /// <summary>
        /// Test WalletTransactions
        /// </summary>
        [Test]
        public void WalletTransactionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.WalletTransactions(id);
            //Assert.IsInstanceOf<InlineResponse2006> (response, "response is InlineResponse2006");
        }

        /// <summary>
        /// Test WalletUnload
        /// </summary>
        [Test]
        public void WalletUnloadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //instance.WalletUnload(id);
        }

        /// <summary>
        /// Test WalletUpdate
        /// </summary>
        [Test]
        public void WalletUpdateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string label = null;
            //var response = instance.WalletUpdate(id, label);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }

        /// <summary>
        /// Test Wallets
        /// </summary>
        [Test]
        public void WalletsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.Wallets();
            //Assert.IsInstanceOf<List<Object>> (response, "response is List<Object>");
        }
        
        private void BalanceStable()
        {
            var apiInstance = new DefaultApi(nodeAddress);
            var testCase = new[]
            {
                new
                {
                    name = "unknown address",
                    addrs = new[] {"prRXwTcDK24hs6AFxj69UuWae3LzhrsPW9"},
                    file = "balance-noaddrs.golden"
                },
                new
                {
                    name = "one address",
                    addrs = new[] {"2THDupTBEo7UqB6dsVizkYUvkKq82Qn4gjf"},
                    file = "balance-2THDupTBEo7UqB6dsVizkYUvkKq82Qn4gjf.golden"
                },
                new
                {
                    name = "duplicate address",
                    addrs = new[] {"2THDupTBEo7UqB6dsVizkYUvkKq82Qn4gjf", "2THDupTBEo7UqB6dsVizkYUvkKq82Qn4gjf"},
                    file = "balance-2THDupTBEo7UqB6dsVizkYUvkKq82Qn4gjf.golden"
                },
                new
                {
                    name = "two address",
                    addrs = new[] {"2THDupTBEo7UqB6dsVizkYUvkKq82Qn4gjf", "212mwY3Dmey6vwnWpiph99zzCmopXTqeVEN"},
                    file = "balance-two-addrs.golden"
                }
            };
            foreach (var tc in testCase)
            {
                var resultg = apiInstance.BalanceGet(string.Join(",", tc.addrs));
                CheckGoldenFile(tc.file, resultg);
                if (useCsrf)
                {
                    apiInstance.Configuration.AddApiKeyPrefix("X-CSRF-TOKEN", GetCsrf());
                }

                var resultp = apiInstance.BalancePost(string.Join(",", tc.addrs));
                Assert.AreEqual(resultg, resultp);
            }
        }

        private void BalanceLive()
        {
            var apiInstance = new DefaultApi(nodeAddress);
            // Genesis address check, should not have a balance
            var result =
                JsonConvert.DeserializeObject<Balance>(apiInstance.BalanceGet("2jBbGxZRGoQG1mqhPBnXnLTxK6oxsTf8os6")
                    .ToString());
            Assert.AreEqual(result, new Balance
            {
                Addresses = new Dictionary<string, BalancePair>
                {
                    ["2jBbGxZRGoQG1mqhPBnXnLTxK6oxsTf8os6"] = new BalancePair()
                }
            });
            // Balance of final distribution address. Should have the same coins balance
            // for the next 15-20 years.
            result = JsonConvert.DeserializeObject<Balance>(apiInstance
                .BalanceGet("ejJjiCwp86ykmFr5iTJ8LxQXJ2wJPTYmkm")
                .ToString());
            Assert.AreEqual(result.Confirmed.coins, result.Predicted.coins);
            Assert.AreEqual(result.Confirmed.hours, result.Predicted.hours);
            Assert.AreNotEqual(0, result.Confirmed.hours);

            // Add 1e4 because someone sent 0.01 coins to it
            decimal expectedBalance = decimal.Parse("1E6", NumberStyles.Any) * decimal.Parse("1E6", NumberStyles.Any) +
                                      decimal.Parse("1E4", NumberStyles.Any);
            Assert.AreEqual(expectedBalance, result.Confirmed.coins);
            // Check that the balance is queryable for addresses known to be affected
            // by the coinhour overflow problem
            var address = new string[]
            {
                "n7AR1VMW1pK7F9TxhYdnr3HoXEQ3g9iTNP",
                "2aTzmXi9jyiq45oTRFCP9Y7dcvnT6Rsp7u",
                "FjFLnus2ePxuaPTXFXfpw6cVAE5owT1t3P",
                "KT9vosieyWhn9yWdY8w7UZ6tk31KH4NAQK"
            };
            Assert.That(true, address => apiInstance.BalanceGet(address));
            apiInstance.BalanceGet(string.Join(",", address));
        }
        
        private static void CheckGoldenFile(string file, object valRecive)
        {
            file = "../../../TestFile/" + file;
            var valSpected = LoadGoldenFile(file, valRecive) ?? LoadGoldenFile(file, valRecive);
            Assert.AreEqual(valRecive.ToString(), valSpected);
        }

        private static object LoadGoldenFile(string file, object valRecive)
        {
            var fs = new FileStream(file, FileMode.OpenOrCreate);
            if (fs.Length == 0)
            {
                fs.Write(Encoding.ASCII.GetBytes(valRecive.ToString()),valRecive.ToString().Length,valRecive.ToString().Length);
                fs.Flush();
                fs.Close();
                return null;
            }

            var b = new byte[fs.Length];
            fs.Read(b, (int) fs.Length, (int) fs.Length);
            fs.Close();
            return Encoding.ASCII.GetString(b);
        }
        
    }
}