/* 
 * Skycoin REST API.
 *
 * Skycoin is a next-generation cryptocurrency.
 *
 * The version of the OpenAPI document: 0.26.0
 * Contact: contact@skycoin.net
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System.Collections.Generic;
using Newtonsoft.Json;
using NUnit.Framework;
using Skyapi.Client;
using Skyapi.Api;
using Skyapi.Model;
using skycoin;

namespace Skyapi.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        internal DefaultApi Instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            Instance = new DefaultApi(Utils.GetNodeHost());
        }

        /// <summary>
        /// Test ApiV2MetricsGet
        /// </summary>
        [Test]
        public void ApiV2MetricsGetTest()
        {
            //Only with API-SETS PROMETHEUS is active.
            try
            {
                var response = Instance.ApiV2MetricsGet();
                Assert.IsInstanceOf<string>(response, "response is string");
                Assert.IsNotNull(response);
                if (Utils.GetTestMode().Equals("stable")) Assert.True(response.Contains("last_block_seq 180"));
            }
            catch (ApiException err)
            {
                Assert.AreEqual(403, err.ErrorCode,
                    "Endpoint Not tested. Endpoint are disable : Api-sets PROMETHEUS could be disabled." +
                    " Try to enable it.");
            }
        }

        /// <summary>
        /// Test Csrf
        /// </summary>
        [Test]
        public void CsrfTest()
        {
            //Only with _useCsrf==true
            if (Utils.UseCsrf())
            {
                var response = Instance.Csrf();
                Assert.IsNotNull(response.CsrfToken);
                Assert.True(response.CsrfToken.Length >= 235);
            }
        }

        /// <summary>
        /// Test DefaultConnections
        /// </summary>
        [Test]
        public void DefaultConnectionsTest()
        {
            var connections = Instance.DefaultConnections();
            Assert.IsNotEmpty(connections);
            connections.Sort();
            Utils.CheckGoldenFile("network-default-peers.golden", connections, connections.GetType());
        }


        /// <summary>
        /// Test NetworkConnectionsTrust
        /// </summary>
        [Test]
        public void NetworkConnectionsTrustTest()
        {
            var connections = Instance.NetworkConnectionsTrust();
            Assert.IsNotEmpty(connections);
            connections.Sort();
            Utils.CheckGoldenFile("network-trusted-peers.golden", connections, connections.GetType());
        }

        /// <summary>
        /// Test VerifyAddress
        /// </summary>
        [Test]
        public void VerifyAddressTest()
        {
            if (Utils.GetTestMode().Equals("stable") || Utils.GetTestMode().Equals("live"))
            {
                var testCases = new[]
                {
                    new
                    {
                        name = "valid address",
                        golden = "verify-address.golden",
                        adds = new Address("7cpQ7t3PZZXvjTst8G7Uvs7XH4LeM8fBPD"),
                        errCode = 200,
                        errMsg = ""
                    },
                    new
                    {
                        name = "invalid address",
                        golden = "",
                        adds = new Address("7apQ7t3PZZXvjTst8G7Uvs7XH4LeM8fBPD"),
                        errCode = 422,
                        errMsg = "Invalid checksum"
                    },
                    new
                    {
                        name = "missing address",
                        golden = "",
                        adds = new Address(""),
                        errCode = 400,
                        errMsg = "address is required"
                    }
                };
                foreach (var tc in testCases)
                {
                    if (Utils.UseCsrf())
                    {
                        Instance.Configuration.AddApiKeyPrefix("X-CSRF-TOKEN", Utils.GetCsrf(instance: Instance));
                    }

                    if (tc.errCode != 200)
                    {
                        var errRaw = Assert.Throws<ApiException>(() => Instance.VerifyAddress(tc.adds));
                        dynamic err = JsonConvert.DeserializeObject(errRaw.Message.Substring(28));
                        Assert.AreEqual(tc.errCode, errRaw.ErrorCode, tc.name);
                        Assert.AreEqual(tc.errMsg, err.error.message.ToString(), tc.name);
                    }
                    else
                    {
                        Assert.DoesNotThrow(() =>
                            {
                                dynamic result = Instance.VerifyAddress(tc.adds);
                                Utils.CheckGoldenFile(tc.golden, result.data, result.GetType());
                            }
                            , tc.name);
                    }
                }
            }
        }

        /// <summary>
        /// Test Version
        /// </summary>
        [Test]
        public void VersionTest()
        {
            var result = Instance.Version();
            Assert.IsNotEmpty(result.Branch);
            Assert.IsNotEmpty(result.Commit);
            Assert.IsNotEmpty(result.Version);
        }

        /// <summary>
        /// Test Wallet
        /// </summary>
        [Test]
        public void WalletTest()
        {
            if (Utils.UseCsrf())
            {
                Instance.Configuration.AddApiKeyPrefix("X-CSRF-TOKEN", Utils.GetCsrf(Instance));
            }

            Assert.DoesNotThrow(() =>
            {
                var randSeed = Utils.GenString();
                var newwallet = Instance.WalletCreate(type: "deterministic", seed: randSeed,
                    label: "the label of my wallet");
                var wallet = Instance.Wallet(newwallet.Meta.Id);
                Instance.WalletUnload(newwallet.Meta.Id);
                Assert.AreEqual(newwallet, wallet);
            });
        }

        /// <summary>
        /// Test WalletCreate.Ignore that Test.Error:Error getting response stram (ReadDone2): ReceiveFailure.   
        /// </summary>
        [Test]
        public void WalletCreateTest()
        {
            if (Utils.GetTestMode().Equals("live") && !Utils.DoLiveWallet())
            {
                return;
            }

            Assert.Ignore();
            if (Utils.UseCsrf())
            {
                Instance.Configuration.AddApiKeyPrefix("X-CSRF-TOKEN", Utils.GetCsrf(Instance));
            }

            var testCases = new[]
            {
                new
                {
                    name = "missing seed.",
                    seed = "",
                    encrypt = false,
                    pass = "",
                    errCode = 400,
                    errMsg = "Error calling WalletCreate: 400 Bad Request - missing seed\n"
                },
                new
                {
                    name = "encrypt must be true",
                    seed = Utils.GenString(),
                    encrypt = false,
                    pass = "1234",
                    errCode = 400,
                    errMsg =
                        "Error calling WalletCreate: 400 Bad Request - encrypt must be true as password is provided\n"
                },
                new
                {
                    name = "no password",
                    seed = Utils.GenString(),
                    encrypt = true,
                    pass = "",
                    errCode = 400,
                    errMsg = "Error calling WalletCreate: 400 Bad Request - missing password\n"
                },
                new
                {
                    name = "no encrypt",
                    seed = Utils.GenString(),
                    encrypt = false,
                    pass = "",
                    errCode = 200,
                    errMsg = ""
                },
                new
                {
                    name = "encrypt wallet",
                    seed = Utils.GenString(),
                    encrypt = true,
                    pass = "1234",
                    errCode = 200,
                    errMsg = ""
                }
            };

            foreach (var tc in testCases)
            {
                if (tc.errCode != 200)
                {
                    var err = Assert.Throws<ApiException>(() =>
                        Instance.WalletCreate(type: "deterministic", seed: tc.seed, label: tc.name,
                            encrypt: tc.encrypt,
                            password: tc.pass));
                    Assert.AreEqual(tc.errCode, err.ErrorCode, tc.name);
                    Assert.AreEqual(tc.errMsg, err.Message, tc.name);
                }
                else
                {
                    var newWallet = Instance.WalletCreate(type: "deterministic", seed: tc.seed, label: tc.name,
                        encrypt: tc.encrypt,
                        password: tc.pass);
                    var walletByid = Instance.Wallet(newWallet.Meta.Id);
                    Assert.AreEqual(newWallet, walletByid, tc.name);
                }
            }
        }

        /// <summary>
        /// Test WalletDecrypt.Ignore that Test.Error:Error getting response stram (ReadDone2): ReceiveFailure.
        /// </summary>
        [Test]
        public void WalletDecryptTest()
        {
            if (Utils.GetTestMode().Equals("live") && !Utils.DoLiveWallet())
            {
                return;
            }

            Assert.Ignore();
            var seed = Utils.GenString();
            var pass = "1234";
            if (Utils.UseCsrf())
            {
                Instance.Configuration.AddApiKeyPrefix("X-CSRF-TOKEN", Utils.GetCsrf(instance: Instance));
            }

            var walletEncrypt =
                Instance.WalletCreate(type: "deterministic", seed: seed, label: "decrypt wallet.", encrypt: true,
                    password: pass);
            if (Utils.UseCsrf())
            {
                Instance.Configuration.AddApiKeyPrefix("X-CSRF-TOKEN", Utils.GetCsrf(Instance));
            }

            var walletDecrypt = Instance.WalletDecrypt(id: walletEncrypt.Meta.Id, password: pass);
            walletEncrypt.Meta.Encrypted = false;
            walletEncrypt.Meta.CryptoType = "";
            Assert.AreEqual(walletEncrypt, walletDecrypt);
        }

        /// <summary>
        /// Test WalletEncrypt.Ignore that Test.Error:Error getting response stram (ReadDone2): ReceiveFailure.
        /// </summary>
        [Test]
        public void WalletEncryptTest()
        {
            if (Utils.GetTestMode().Equals("live") && !Utils.DoLiveWallet())
            {
                return;
            }

            Assert.Ignore();
            var seed = Utils.GenString();
            var pass = "1234";
            if (Utils.UseCsrf())
            {
                Instance.Configuration.AddApiKeyPrefix("X-CSRF-TOKEN", Utils.GetCsrf(instance: Instance));
            }

            var walletDecrypt =
                Instance.WalletCreate(type: "deterministic", seed: seed, label: "decrypt wallet.", encrypt: false);
            if (Utils.UseCsrf())
            {
                Instance.Configuration.AddApiKeyPrefix("X-CSRF-TOKEN", Utils.GetCsrf(Instance));
            }

            var walletEncrypt = Instance.WalletEncrypt(id: walletDecrypt.Meta.Id, password: pass);
            walletEncrypt.Meta.Encrypted = false;
            walletEncrypt.Meta.CryptoType = "";
            Assert.AreEqual(walletDecrypt, walletEncrypt);
        }

        /// <summary>
        /// Test WalletFolder
        /// </summary>
        [Test]
        public void WalletFolderTest()
        {
            if (Utils.GetTestMode().Equals("live") && !Utils.DoLiveWallet())
            {
                return;
            }

            Assert.DoesNotThrow(() =>
            {
                var folderName = Instance.WalletFolder();
                Assert.NotNull(folderName);
                Assert.IsNotEmpty(folderName.Address);
            });
        }

        /// <summary>
        /// Test WalletNewAddress
        /// </summary>
        [Test]
        public void WalletNewAddressTest()
        {
            var seedStr = new _GoString_();
            skycoin.skycoin.SKY_bip39_NewDefaultMnemomic(seedStr);
            var mainSeed = seedStr.p;
            var testCases = new[]
            {
                new
                {
                    name = "deterministic",
                    seed = mainSeed,
                    seedPassphrase = "",
                    walletType = "deterministic"
                },
                new
                {
                    name = "bip44 without seed passphrase",
                    seed = mainSeed,
                    seedPassphrase = "",
                    walletType = "bip44"
                },
                new
                {
                    name = "bip44 with seed passphrase",
                    seed = mainSeed,
                    seedPassphrase = "foobar",
                    walletType = "bip44"
                },
            };
            foreach (var tc in testCases)
            {
                for (var i = 1; i < 30; i++)
                {
                    var name = $"{tc.name} generate {i} addresses";
                    Assert.DoesNotThrow(() =>
                    {
                        var encrypt = false;
                        var pass = "";
                        if (i == 2)
                        {
                            encrypt = true;
                            pass = "pwd";
                        }

                        var cw = Utils.CreateWallet(instance: Instance, type: tc.walletType, seed: tc.seed,
                            seedPassphase: tc.seedPassphrase, pass: pass, encrypt: encrypt);
                        var w = cw.Item1;
                        var clean = cw.Item2;
                        dynamic addrs = Instance.WalletNewAddress(w.Meta.Id, i, pass);
                        uint err;
                        switch (tc.walletType)
                        {
                            case "deterministic":
                                var seckeys = new cipher_SecKeys();
                                var seeds = new GoSlice();
                                seeds.convertString(seedStr);
                                err = skycoin.skycoin.SKY_cipher_GenerateDeterministicKeyPairs(seeds, i + 1,
                                    seckeys);
                                Assert.AreEqual(skycoin.skycoin.SKY_OK, err);
                                List<string> As = new List<string>();
                                for (int j = 0; j < seckeys.count; j++)
                                {
                                    var cipherAddress = new cipher__Address();
                                    err = skycoin.skycoin.SKY_cipher_AddressFromSecKey(seckeys.getAt(j), cipherAddress);
                                    Assert.AreEqual(skycoin.skycoin.SKY_OK, err);
                                    var address = new _GoString_();
                                    err = skycoin.skycoin.SKY_cipher_Address_String(cipherAddress, address);
                                    Assert.AreEqual(skycoin.skycoin.SKY_OK, err);
                                    As.Add(address.p);
                                }

                                Assert.AreEqual(addrs.addresses.Count, As.Count - 1);
                                for (int j = 0; j < addrs.addresses.Count; j++)
                                {
                                    Assert.AreEqual(As[j + 1], addrs.addresses[j].ToString());
                                }

                                break;
                            case "bip44":
                                var ss = new GoSlice();
                                err = skycoin.skycoin.SKY_bip39_NewSeed(tc.seed, tc.seedPassphrase, ss);
                                Assert.AreEqual(skycoin.skycoin.SKY_OK, err);
//Require bip44NewCoin
                                break;
                            default:
                                Assert.Fail($"unhandled wallet type {tc.walletType}");
                                break;
                        }

                        clean();
                    });
                    break;
                }
            }
        }

        /// <summary>
        /// Test WalletNewSeed
        /// </summary>
        [Test]
        public void WalletNewSeedTest()
        {
            if (Utils.GetTestMode().Equals("live") && !Utils.DoLiveWallet())
            {
                return;
            }

            var testCases = new[]
            {
                new
                {
                    name = "entropy 128",
                    entropy = "128",
                    cantwords = 12,
                    errCode = 200,
                    errMsg = ""
                },
                new
                {
                    name = "entropy 256",
                    entropy = "256",
                    cantwords = 24,
                    errCode = 200,
                    errMsg = ""
                },
                new
                {
                    name = "entropy 100",
                    entropy = "100",
                    cantwords = 12,
                    errCode = 400,
                    errMsg = "Error calling WalletNewSeed: 400 Bad Request - entropy length must be 128 or 256\n"
                }
            };

            foreach (var tc in testCases)
            {
                if (tc.errCode != 200)
                {
                    var err = Assert.Throws<ApiException>(() => Instance.WalletNewSeed(tc.entropy));
                    Assert.AreEqual(tc.errCode, err.ErrorCode, tc.name);
                    Assert.AreEqual(tc.errMsg, err.Message, tc.name);
                }
                else
                {
                    dynamic newseed = Instance.WalletNewSeed(tc.entropy);
                    Assert.True(newseed.seed.ToString().Split(' ').Length == tc.cantwords, tc.name);
                    dynamic newseed2 = Instance.WalletNewSeed(tc.entropy);
                    Assert.AreNotEqual(newseed.seed.ToString(), newseed2.seed.ToString(), tc.name);
                }
            }
        }

        /// <summary>
        /// Test WalletRecover.Ignore that Test.Error:Error getting response stram (ReadDone2): ReceiveFailure.
        /// </summary>
        [Test]
        public void WalletRecoverTest()
        {
            if (Utils.GetTestMode().Equals("live") && !Utils.DoLiveWallet())
            {
                return;
            }

            Assert.Ignore();
            var randSeed = Utils.GenString();

            Assert.DoesNotThrow(() =>
            {
                var pass = "1234";
                if (Utils.UseCsrf())
                {
                    Instance.Configuration.AddApiKeyPrefix("X-CSRF-TOKEN", Utils.GetCsrf(Instance));
                }

                var wallet
                    = Instance.WalletCreate(type: "deterministic", label: "recover wallet", seed: randSeed,
                        encrypt: true, password: pass);
                Assert.True(wallet.Meta.Encrypted);
                if (Utils.UseCsrf())
                {
                    Instance.Configuration.AddApiKeyPrefix("X-CSRF-TOKEN", Utils.GetCsrf(Instance));
                }

                dynamic recoverData = Instance.WalletRecover(id: wallet.Meta.Id, seed: randSeed);
                var recoverWallet = JsonConvert.DeserializeObject<Wallet>(recoverData.data.ToString());
                wallet.Meta.Encrypted = false;
                wallet.Meta.CryptoType = "";
                Assert.AreEqual(wallet, recoverWallet);
            });
        }

        /// <summary>
        /// Test WalletSeed.Ignore that Test. Error:Error getting response stram (ReadDone2): ReceiveFailure.
        /// </summary>
        [Test]
        public void WalletSeedTest()
        {
            Assert.Ignore();
            var pass = "1234";
            if (!Instance.Wallets().Exists(wallet => wallet.Meta.Label.Equals("seed test.")))
            {
                var seed = Utils.GenString();
                if (Utils.UseCsrf())
                {
                    Instance.Configuration.AddApiKeyPrefix("X-CSRF-TOKEN", Utils.GetCsrf(Instance));
                }

                Instance.WalletCreate("deterministic", seed, "seed test.", encrypt: true, password: pass);
            }

            var walletseed = Instance.Wallets().Find(wallet => wallet.Meta.Label.Equals("seed test."));
            if (Utils.UseCsrf())
            {
                Instance.Configuration.AddApiKeyPrefix("X-CSRF-TOKEN", Utils.GetCsrf(Instance));
            }

            var err = Assert.Throws<ApiException>(() => Instance.WalletSeed(walletseed.Meta.Id, pass));
            Assert.AreEqual(403, err.ErrorCode);
            Assert.AreEqual("Error calling WalletSeed: 403 Forbidden - Endpoint is disabled\n", err.Message);
        }

        /// <summary>
        /// Test WalletSeedVerify
        /// </summary>
        [Test]
        public void WalletSeedVerifyTest()
        {
            if (Utils.UseCsrf())
            {
                Instance.Configuration.AddApiKeyPrefix("X-CSRF-TOKEN", Utils.GetCsrf(Instance));
            }

            //Test with correct seed
            var result =
                Instance.WalletSeedVerify(
                    "nut wife logic sample addict shop before tobacco crisp bleak lawsuit affair");
            Assert.NotNull(result);
            if (Utils.UseCsrf())
            {
                Instance.Configuration.AddApiKeyPrefix("X-CSRF-TOKEN", Utils.GetCsrf(Instance));
            }

            //test with incorrect seed
            Assert.Throws<ApiException>(() => Instance.WalletSeedVerify("nut"));
        }

        /// <summary>
        /// Test WalletUpdate
        /// </summary>
        [Test]
        public void WalletUpdateTest()
        {
            if (!(Utils.GetTestMode().Equals("live") || Utils.GetTestMode().Equals("stable")))
            {
                return;
            }

            if (Utils.SkipWalletIfLive())
            {
                return;
            }

            if (Utils.UseCsrf())
            {
                Instance.Configuration.AddApiKeyPrefix("X-CSRF-TOKEN", Utils.GetCsrf(Instance));
            }

            var testCases = new[]
            {
                "deterministic",
                "bip44",
                //            "xpub"
            };
            foreach (var walletType in testCases)
            {
                var cw = Utils.CreateWallet(instance: Instance, type: walletType);
                Assert.DoesNotThrow(() =>
                {
                    Instance.WalletUpdate(cw.Item1.Meta.Id, "new wallet");
                    var w1 = Instance.Wallet(cw.Item1.Meta.Id);
                    Assert.AreEqual(w1.Meta.Label, "new wallet");
                });
                cw.Item2();
            }
        }

        /// <summary>
        /// Test Wallets
        /// </summary>
        [Test]
        public void WalletsTest()
        {
            if (Utils.GetTestMode().Equals("live") && !Utils.DoLiveWallet())
            {
                return;
            }

            var result = Instance.Wallets();

            result.ForEach(wlt =>
            {
                Assert.DoesNotThrow(() =>
                {
                    var walletById = Instance.Wallet(wlt.Meta.Id);
                    Assert.AreEqual(wlt, walletById);
                });
            });
        }
    }
}